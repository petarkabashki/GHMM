# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ghmmwrapper')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ghmmwrapper')
    _ghmmwrapper = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ghmmwrapper', [dirname(__file__)])
        except ImportError:
            import _ghmmwrapper
            return _ghmmwrapper
        try:
            _mod = imp.load_module('_ghmmwrapper', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ghmmwrapper = swig_import_helper()
    del swig_import_helper
else:
    import _ghmmwrapper
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def cp_class_change(smo, seq, k, t):
    return _ghmmwrapper.cp_class_change(smo, seq, k, t)
cp_class_change = _ghmmwrapper.cp_class_change

def setSwitchingFunction(smd):
    return _ghmmwrapper.setSwitchingFunction(smd)
setSwitchingFunction = _ghmmwrapper.setSwitchingFunction

def python_class_change(smo, seq, k, t):
    return _ghmmwrapper.python_class_change(smo, seq, k, t)
python_class_change = _ghmmwrapper.python_class_change

def setPythonSwitching(smd, python_module, python_function):
    return _ghmmwrapper.setPythonSwitching(smd, python_module, python_function)
setPythonSwitching = _ghmmwrapper.setPythonSwitching
class threshold_user_data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, threshold_user_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, threshold_user_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["seq_index"] = _ghmmwrapper.threshold_user_data_seq_index_set
    __swig_getmethods__["seq_index"] = _ghmmwrapper.threshold_user_data_seq_index_get
    if _newclass:
        seq_index = _swig_property(_ghmmwrapper.threshold_user_data_seq_index_get, _ghmmwrapper.threshold_user_data_seq_index_set)
    __swig_setmethods__["threshold"] = _ghmmwrapper.threshold_user_data_threshold_set
    __swig_getmethods__["threshold"] = _ghmmwrapper.threshold_user_data_threshold_get
    if _newclass:
        threshold = _swig_property(_ghmmwrapper.threshold_user_data_threshold_get, _ghmmwrapper.threshold_user_data_threshold_set)
    __swig_setmethods__["offset_x"] = _ghmmwrapper.threshold_user_data_offset_x_set
    __swig_getmethods__["offset_x"] = _ghmmwrapper.threshold_user_data_offset_x_get
    if _newclass:
        offset_x = _swig_property(_ghmmwrapper.threshold_user_data_offset_x_get, _ghmmwrapper.threshold_user_data_offset_x_set)
    __swig_setmethods__["offset_y"] = _ghmmwrapper.threshold_user_data_offset_y_set
    __swig_getmethods__["offset_y"] = _ghmmwrapper.threshold_user_data_offset_y_get
    if _newclass:
        offset_y = _swig_property(_ghmmwrapper.threshold_user_data_offset_y_get, _ghmmwrapper.threshold_user_data_offset_y_set)

    def __init__(self):
        this = _ghmmwrapper.new_threshold_user_data()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ghmmwrapper.delete_threshold_user_data
    __del__ = lambda self: None
threshold_user_data_swigregister = _ghmmwrapper.threshold_user_data_swigregister
threshold_user_data_swigregister(threshold_user_data)

class boolean_user_data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, boolean_user_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, boolean_user_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["seq_index"] = _ghmmwrapper.boolean_user_data_seq_index_set
    __swig_getmethods__["seq_index"] = _ghmmwrapper.boolean_user_data_seq_index_get
    if _newclass:
        seq_index = _swig_property(_ghmmwrapper.boolean_user_data_seq_index_get, _ghmmwrapper.boolean_user_data_seq_index_set)
    __swig_setmethods__["offset_x"] = _ghmmwrapper.boolean_user_data_offset_x_set
    __swig_getmethods__["offset_x"] = _ghmmwrapper.boolean_user_data_offset_x_get
    if _newclass:
        offset_x = _swig_property(_ghmmwrapper.boolean_user_data_offset_x_get, _ghmmwrapper.boolean_user_data_offset_x_set)
    __swig_setmethods__["offset_y"] = _ghmmwrapper.boolean_user_data_offset_y_set
    __swig_getmethods__["offset_y"] = _ghmmwrapper.boolean_user_data_offset_y_get
    if _newclass:
        offset_y = _swig_property(_ghmmwrapper.boolean_user_data_offset_y_get, _ghmmwrapper.boolean_user_data_offset_y_set)

    def __init__(self):
        this = _ghmmwrapper.new_boolean_user_data()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ghmmwrapper.delete_boolean_user_data
    __del__ = lambda self: None
boolean_user_data_swigregister = _ghmmwrapper.boolean_user_data_swigregister
boolean_user_data_swigregister(boolean_user_data)


def gt_sum(mo, X, Y, index_x, index_y, user_data):
    return _ghmmwrapper.gt_sum(mo, X, Y, index_x, index_y, user_data)
gt_sum = _ghmmwrapper.gt_sum

def lt_sum(mo, X, Y, index_x, index_y, user_data):
    return _ghmmwrapper.lt_sum(mo, X, Y, index_x, index_y, user_data)
lt_sum = _ghmmwrapper.lt_sum

def boolean_and(mo, X, Y, index_x, index_y, user_data):
    return _ghmmwrapper.boolean_and(mo, X, Y, index_x, index_y, user_data)
boolean_and = _ghmmwrapper.boolean_and

def boolean_or(mo, X, Y, index_x, index_y, user_data):
    return _ghmmwrapper.boolean_or(mo, X, Y, index_x, index_y, user_data)
boolean_or = _ghmmwrapper.boolean_or

def set_to_lt_sum(pccc, seq_index, threshold, offset_x, offset_y):
    return _ghmmwrapper.set_to_lt_sum(pccc, seq_index, threshold, offset_x, offset_y)
set_to_lt_sum = _ghmmwrapper.set_to_lt_sum

def set_to_gt_sum(pccc, seq_index, threshold, offset_x, offset_y):
    return _ghmmwrapper.set_to_gt_sum(pccc, seq_index, threshold, offset_x, offset_y)
set_to_gt_sum = _ghmmwrapper.set_to_gt_sum

def set_to_boolean_and(pccc, seq_index, offset_x, offset_y):
    return _ghmmwrapper.set_to_boolean_and(pccc, seq_index, offset_x, offset_y)
set_to_boolean_and = _ghmmwrapper.set_to_boolean_and

def set_to_boolean_or(pccc, seq_index, offset_x, offset_y):
    return _ghmmwrapper.set_to_boolean_or(pccc, seq_index, offset_x, offset_y)
set_to_boolean_or = _ghmmwrapper.set_to_boolean_or
SMO_FILE_SUPPORT = _ghmmwrapper.SMO_FILE_SUPPORT
ASCI_SEQ_FILE = _ghmmwrapper.ASCI_SEQ_FILE
SEQ_LABEL_FIELD = _ghmmwrapper.SEQ_LABEL_FIELD
kNotSpecified = _ghmmwrapper.kNotSpecified
kLeftRight = _ghmmwrapper.kLeftRight
kSilentStates = _ghmmwrapper.kSilentStates
kTiedEmissions = _ghmmwrapper.kTiedEmissions
kUntied = _ghmmwrapper.kUntied
kHigherOrderEmissions = _ghmmwrapper.kHigherOrderEmissions
kBackgroundDistributions = _ghmmwrapper.kBackgroundDistributions
kNoBackgroundDistribution = _ghmmwrapper.kNoBackgroundDistribution
kLabeledStates = _ghmmwrapper.kLabeledStates
kTransitionClasses = _ghmmwrapper.kTransitionClasses
kDiscreteHMM = _ghmmwrapper.kDiscreteHMM
kContinuousHMM = _ghmmwrapper.kContinuousHMM
kPairHMM = _ghmmwrapper.kPairHMM
kMultivariate = _ghmmwrapper.kMultivariate
EPS_ITER_BW = _ghmmwrapper.EPS_ITER_BW
MAX_ITER_BW = _ghmmwrapper.MAX_ITER_BW

def set_pylogging(pyfunc):
    return _ghmmwrapper.set_pylogging(pyfunc)
set_pylogging = _ghmmwrapper.set_pylogging

def ghmm_rng_init():
    return _ghmmwrapper.ghmm_rng_init()
ghmm_rng_init = _ghmmwrapper.ghmm_rng_init

def ghmm_rng_timeseed(r):
    return _ghmmwrapper.ghmm_rng_timeseed(r)
ghmm_rng_timeseed = _ghmmwrapper.ghmm_rng_timeseed

def time_seed():
    return _ghmmwrapper.time_seed()
time_seed = _ghmmwrapper.time_seed

def ighmm_rand_normal_density_trunc(x, mean, u, a):
    return _ghmmwrapper.ighmm_rand_normal_density_trunc(x, mean, u, a)
ighmm_rand_normal_density_trunc = _ghmmwrapper.ighmm_rand_normal_density_trunc
class ghmm_alphabet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ghmm_alphabet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ghmm_alphabet, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _ghmmwrapper.ghmm_alphabet_id_set
    __swig_getmethods__["id"] = _ghmmwrapper.ghmm_alphabet_id_get
    if _newclass:
        id = _swig_property(_ghmmwrapper.ghmm_alphabet_id_get, _ghmmwrapper.ghmm_alphabet_id_set)
    __swig_setmethods__["description"] = _ghmmwrapper.ghmm_alphabet_description_set
    __swig_getmethods__["description"] = _ghmmwrapper.ghmm_alphabet_description_get
    if _newclass:
        description = _swig_property(_ghmmwrapper.ghmm_alphabet_description_get, _ghmmwrapper.ghmm_alphabet_description_set)
    __swig_setmethods__["size"] = _ghmmwrapper.ghmm_alphabet_size_set
    __swig_getmethods__["size"] = _ghmmwrapper.ghmm_alphabet_size_get
    if _newclass:
        size = _swig_property(_ghmmwrapper.ghmm_alphabet_size_get, _ghmmwrapper.ghmm_alphabet_size_set)
    __swig_setmethods__["symbols"] = _ghmmwrapper.ghmm_alphabet_symbols_set
    __swig_getmethods__["symbols"] = _ghmmwrapper.ghmm_alphabet_symbols_get
    if _newclass:
        symbols = _swig_property(_ghmmwrapper.ghmm_alphabet_symbols_get, _ghmmwrapper.ghmm_alphabet_symbols_set)

    def __init__(self, size, desc):
        this = _ghmmwrapper.new_ghmm_alphabet(size, desc)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ghmmwrapper.delete_ghmm_alphabet
    __del__ = lambda self: None

    def getSymbol(self, index):
        return _ghmmwrapper.ghmm_alphabet_getSymbol(self, index)

    def setSymbol(self, index, s):
        return _ghmmwrapper.ghmm_alphabet_setSymbol(self, index, s)
ghmm_alphabet_swigregister = _ghmmwrapper.ghmm_alphabet_swigregister
ghmm_alphabet_swigregister(ghmm_alphabet)

class ghmm_cseq(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ghmm_cseq, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ghmm_cseq, name)
    __repr__ = _swig_repr
    __swig_setmethods__["seq"] = _ghmmwrapper.ghmm_cseq_seq_set
    __swig_getmethods__["seq"] = _ghmmwrapper.ghmm_cseq_seq_get
    if _newclass:
        seq = _swig_property(_ghmmwrapper.ghmm_cseq_seq_get, _ghmmwrapper.ghmm_cseq_seq_set)
    __swig_setmethods__["seq_len"] = _ghmmwrapper.ghmm_cseq_seq_len_set
    __swig_getmethods__["seq_len"] = _ghmmwrapper.ghmm_cseq_seq_len_get
    if _newclass:
        seq_len = _swig_property(_ghmmwrapper.ghmm_cseq_seq_len_get, _ghmmwrapper.ghmm_cseq_seq_len_set)
    __swig_setmethods__["seq_id"] = _ghmmwrapper.ghmm_cseq_seq_id_set
    __swig_getmethods__["seq_id"] = _ghmmwrapper.ghmm_cseq_seq_id_get
    if _newclass:
        seq_id = _swig_property(_ghmmwrapper.ghmm_cseq_seq_id_get, _ghmmwrapper.ghmm_cseq_seq_id_set)
    __swig_setmethods__["seq_w"] = _ghmmwrapper.ghmm_cseq_seq_w_set
    __swig_getmethods__["seq_w"] = _ghmmwrapper.ghmm_cseq_seq_w_get
    if _newclass:
        seq_w = _swig_property(_ghmmwrapper.ghmm_cseq_seq_w_get, _ghmmwrapper.ghmm_cseq_seq_w_set)
    __swig_setmethods__["seq_number"] = _ghmmwrapper.ghmm_cseq_seq_number_set
    __swig_getmethods__["seq_number"] = _ghmmwrapper.ghmm_cseq_seq_number_get
    if _newclass:
        seq_number = _swig_property(_ghmmwrapper.ghmm_cseq_seq_number_get, _ghmmwrapper.ghmm_cseq_seq_number_set)
    __swig_setmethods__["capacity"] = _ghmmwrapper.ghmm_cseq_capacity_set
    __swig_getmethods__["capacity"] = _ghmmwrapper.ghmm_cseq_capacity_get
    if _newclass:
        capacity = _swig_property(_ghmmwrapper.ghmm_cseq_capacity_get, _ghmmwrapper.ghmm_cseq_capacity_set)
    __swig_setmethods__["total_w"] = _ghmmwrapper.ghmm_cseq_total_w_set
    __swig_getmethods__["total_w"] = _ghmmwrapper.ghmm_cseq_total_w_get
    if _newclass:
        total_w = _swig_property(_ghmmwrapper.ghmm_cseq_total_w_get, _ghmmwrapper.ghmm_cseq_total_w_set)
    __swig_setmethods__["dim"] = _ghmmwrapper.ghmm_cseq_dim_set
    __swig_getmethods__["dim"] = _ghmmwrapper.ghmm_cseq_dim_get
    if _newclass:
        dim = _swig_property(_ghmmwrapper.ghmm_cseq_dim_get, _ghmmwrapper.ghmm_cseq_dim_set)
    __swig_setmethods__["flags"] = _ghmmwrapper.ghmm_cseq_flags_set
    __swig_getmethods__["flags"] = _ghmmwrapper.ghmm_cseq_flags_get
    if _newclass:
        flags = _swig_property(_ghmmwrapper.ghmm_cseq_flags_get, _ghmmwrapper.ghmm_cseq_flags_set)

    def __init__(self, *args):
        this = _ghmmwrapper.new_ghmm_cseq(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ghmmwrapper.delete_ghmm_cseq
    __del__ = lambda self: None

    def get_singlesequence(self, index):
        return _ghmmwrapper.ghmm_cseq_get_singlesequence(self, index)

    def subseq_free(self):
        return _ghmmwrapper.ghmm_cseq_subseq_free(self)

    def add(self, source):
        return _ghmmwrapper.ghmm_cseq_add(self, source)

    def clean(self):
        return _ghmmwrapper.ghmm_cseq_clean(self)

    def partition(self, sqd_train, sqd_test, train_ratio):
        return _ghmmwrapper.ghmm_cseq_partition(self, sqd_train, sqd_test, train_ratio)

    def copy_all(self, t_num, source, s_num):
        return _ghmmwrapper.ghmm_cseq_copy_all(self, t_num, source, s_num)

    def getSequence(self, index):
        return _ghmmwrapper.ghmm_cseq_getSequence(self, index)

    def setSequence(self, seqno, O):
        return _ghmmwrapper.ghmm_cseq_setSequence(self, seqno, O)

    def getSymbol(self, seqno, index):
        return _ghmmwrapper.ghmm_cseq_getSymbol(self, seqno, index)

    def setSymbol(self, seqno, index, value):
        return _ghmmwrapper.ghmm_cseq_setSymbol(self, seqno, index, value)

    def getLength(self, i):
        return _ghmmwrapper.ghmm_cseq_getLength(self, i)

    def setLength(self, i, len):
        return _ghmmwrapper.ghmm_cseq_setLength(self, i, len)

    def getWeight(self, i):
        return _ghmmwrapper.ghmm_cseq_getWeight(self, i)

    def setWeight(self, i, w):
        return _ghmmwrapper.ghmm_cseq_setWeight(self, i, w)

    def write(self, filename, discrete=0):
        return _ghmmwrapper.ghmm_cseq_write(self, filename, discrete)
ghmm_cseq_swigregister = _ghmmwrapper.ghmm_cseq_swigregister
ghmm_cseq_swigregister(ghmm_cseq)


def ghmm_cseq_free(csq):
    return _ghmmwrapper.ghmm_cseq_free(csq)
ghmm_cseq_free = _ghmmwrapper.ghmm_cseq_free

def ghmm_cseq_calloc(number):
    return _ghmmwrapper.ghmm_cseq_calloc(number)
ghmm_cseq_calloc = _ghmmwrapper.ghmm_cseq_calloc

def cseq_ptr_array_alloc(number):
    return _ghmmwrapper.cseq_ptr_array_alloc(number)
cseq_ptr_array_alloc = _ghmmwrapper.cseq_ptr_array_alloc

def cseq_ptr_array_getitem(arg1, index):
    return _ghmmwrapper.cseq_ptr_array_getitem(arg1, index)
cseq_ptr_array_getitem = _ghmmwrapper.cseq_ptr_array_getitem

def cseq_ptr_array_setitem(arg1, index, value):
    return _ghmmwrapper.cseq_ptr_array_setitem(arg1, index, value)
cseq_ptr_array_setitem = _ghmmwrapper.cseq_ptr_array_setitem
class ghmm_dseq(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ghmm_dseq, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ghmm_dseq, name)
    __repr__ = _swig_repr
    __swig_setmethods__["seq"] = _ghmmwrapper.ghmm_dseq_seq_set
    __swig_getmethods__["seq"] = _ghmmwrapper.ghmm_dseq_seq_get
    if _newclass:
        seq = _swig_property(_ghmmwrapper.ghmm_dseq_seq_get, _ghmmwrapper.ghmm_dseq_seq_set)
    __swig_setmethods__["states"] = _ghmmwrapper.ghmm_dseq_states_set
    __swig_getmethods__["states"] = _ghmmwrapper.ghmm_dseq_states_get
    if _newclass:
        states = _swig_property(_ghmmwrapper.ghmm_dseq_states_get, _ghmmwrapper.ghmm_dseq_states_set)
    __swig_setmethods__["seq_len"] = _ghmmwrapper.ghmm_dseq_seq_len_set
    __swig_getmethods__["seq_len"] = _ghmmwrapper.ghmm_dseq_seq_len_get
    if _newclass:
        seq_len = _swig_property(_ghmmwrapper.ghmm_dseq_seq_len_get, _ghmmwrapper.ghmm_dseq_seq_len_set)
    __swig_setmethods__["states_len"] = _ghmmwrapper.ghmm_dseq_states_len_set
    __swig_getmethods__["states_len"] = _ghmmwrapper.ghmm_dseq_states_len_get
    if _newclass:
        states_len = _swig_property(_ghmmwrapper.ghmm_dseq_states_len_get, _ghmmwrapper.ghmm_dseq_states_len_set)
    __swig_setmethods__["seq_id"] = _ghmmwrapper.ghmm_dseq_seq_id_set
    __swig_getmethods__["seq_id"] = _ghmmwrapper.ghmm_dseq_seq_id_get
    if _newclass:
        seq_id = _swig_property(_ghmmwrapper.ghmm_dseq_seq_id_get, _ghmmwrapper.ghmm_dseq_seq_id_set)
    __swig_setmethods__["seq_w"] = _ghmmwrapper.ghmm_dseq_seq_w_set
    __swig_getmethods__["seq_w"] = _ghmmwrapper.ghmm_dseq_seq_w_get
    if _newclass:
        seq_w = _swig_property(_ghmmwrapper.ghmm_dseq_seq_w_get, _ghmmwrapper.ghmm_dseq_seq_w_set)
    __swig_setmethods__["seq_number"] = _ghmmwrapper.ghmm_dseq_seq_number_set
    __swig_getmethods__["seq_number"] = _ghmmwrapper.ghmm_dseq_seq_number_get
    if _newclass:
        seq_number = _swig_property(_ghmmwrapper.ghmm_dseq_seq_number_get, _ghmmwrapper.ghmm_dseq_seq_number_set)
    __swig_setmethods__["capacity"] = _ghmmwrapper.ghmm_dseq_capacity_set
    __swig_getmethods__["capacity"] = _ghmmwrapper.ghmm_dseq_capacity_get
    if _newclass:
        capacity = _swig_property(_ghmmwrapper.ghmm_dseq_capacity_get, _ghmmwrapper.ghmm_dseq_capacity_set)
    __swig_setmethods__["total_w"] = _ghmmwrapper.ghmm_dseq_total_w_set
    __swig_getmethods__["total_w"] = _ghmmwrapper.ghmm_dseq_total_w_get
    if _newclass:
        total_w = _swig_property(_ghmmwrapper.ghmm_dseq_total_w_get, _ghmmwrapper.ghmm_dseq_total_w_set)
    __swig_setmethods__["state_labels"] = _ghmmwrapper.ghmm_dseq_state_labels_set
    __swig_getmethods__["state_labels"] = _ghmmwrapper.ghmm_dseq_state_labels_get
    if _newclass:
        state_labels = _swig_property(_ghmmwrapper.ghmm_dseq_state_labels_get, _ghmmwrapper.ghmm_dseq_state_labels_set)
    __swig_setmethods__["state_labels_len"] = _ghmmwrapper.ghmm_dseq_state_labels_len_set
    __swig_getmethods__["state_labels_len"] = _ghmmwrapper.ghmm_dseq_state_labels_len_get
    if _newclass:
        state_labels_len = _swig_property(_ghmmwrapper.ghmm_dseq_state_labels_len_get, _ghmmwrapper.ghmm_dseq_state_labels_len_set)
    __swig_setmethods__["flags"] = _ghmmwrapper.ghmm_dseq_flags_set
    __swig_getmethods__["flags"] = _ghmmwrapper.ghmm_dseq_flags_get
    if _newclass:
        flags = _swig_property(_ghmmwrapper.ghmm_dseq_flags_get, _ghmmwrapper.ghmm_dseq_flags_set)

    def __init__(self, *args):
        this = _ghmmwrapper.new_ghmm_dseq(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ghmmwrapper.delete_ghmm_dseq
    __del__ = lambda self: None

    def init_labels(self, *args):
        return _ghmmwrapper.ghmm_dseq_init_labels(self, *args)

    def calloc_state_labels(self):
        return _ghmmwrapper.ghmm_dseq_calloc_state_labels(self)

    def get_singlesequence(self, index):
        return _ghmmwrapper.ghmm_dseq_get_singlesequence(self, index)

    def subseq_free(self):
        return _ghmmwrapper.ghmm_dseq_subseq_free(self)

    def max_symbol(self):
        return _ghmmwrapper.ghmm_dseq_max_symbol(self)

    def add(self, source):
        return _ghmmwrapper.ghmm_dseq_add(self, source)

    def check(self, max_symb):
        return _ghmmwrapper.ghmm_dseq_check(self, max_symb)

    def clean(self):
        return _ghmmwrapper.ghmm_dseq_clean(self)

    def getSequence(self, index):
        return _ghmmwrapper.ghmm_dseq_getSequence(self, index)

    def setSequence(self, seqno, O):
        return _ghmmwrapper.ghmm_dseq_setSequence(self, seqno, O)

    def getSymbol(self, seqno, index):
        return _ghmmwrapper.ghmm_dseq_getSymbol(self, seqno, index)

    def setSymbol(self, seqno, index, value):
        return _ghmmwrapper.ghmm_dseq_setSymbol(self, seqno, index, value)

    def getLength(self, i):
        return _ghmmwrapper.ghmm_dseq_getLength(self, i)

    def setLength(self, i, len):
        return _ghmmwrapper.ghmm_dseq_setLength(self, i, len)

    def getWeight(self, i):
        return _ghmmwrapper.ghmm_dseq_getWeight(self, i)

    def setWeight(self, i, w):
        return _ghmmwrapper.ghmm_dseq_setWeight(self, i, w)

    def getLabels(self, index):
        return _ghmmwrapper.ghmm_dseq_getLabels(self, index)

    def setLabels(self, index, labels):
        return _ghmmwrapper.ghmm_dseq_setLabels(self, index, labels)

    def getLabelsLength(self, i):
        return _ghmmwrapper.ghmm_dseq_getLabelsLength(self, i)

    def setLabelsLength(self, i, len):
        return _ghmmwrapper.ghmm_dseq_setLabelsLength(self, i, len)

    def copyStateLabel(self, index, target, no):
        return _ghmmwrapper.ghmm_dseq_copyStateLabel(self, index, target, no)

    def write(self, filename):
        return _ghmmwrapper.ghmm_dseq_write(self, filename)
ghmm_dseq_swigregister = _ghmmwrapper.ghmm_dseq_swigregister
ghmm_dseq_swigregister(ghmm_dseq)


def ghmm_dseq_free(sq):
    return _ghmmwrapper.ghmm_dseq_free(sq)
ghmm_dseq_free = _ghmmwrapper.ghmm_dseq_free

def ghmm_dseq_calloc(number):
    return _ghmmwrapper.ghmm_dseq_calloc(number)
ghmm_dseq_calloc = _ghmmwrapper.ghmm_dseq_calloc

def dseq_ptr_array_alloc(number):
    return _ghmmwrapper.dseq_ptr_array_alloc(number)
dseq_ptr_array_alloc = _ghmmwrapper.dseq_ptr_array_alloc

def dseq_ptr_array_getitem(arg1, index):
    return _ghmmwrapper.dseq_ptr_array_getitem(arg1, index)
dseq_ptr_array_getitem = _ghmmwrapper.dseq_ptr_array_getitem

def dseq_ptr_array_setitem(arg1, index, value):
    return _ghmmwrapper.dseq_ptr_array_setitem(arg1, index, value)
dseq_ptr_array_setitem = _ghmmwrapper.dseq_ptr_array_setitem
class ghmm_dpseq(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ghmm_dpseq, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ghmm_dpseq, name)
    __repr__ = _swig_repr
    __swig_setmethods__["seq"] = _ghmmwrapper.ghmm_dpseq_seq_set
    __swig_getmethods__["seq"] = _ghmmwrapper.ghmm_dpseq_seq_get
    if _newclass:
        seq = _swig_property(_ghmmwrapper.ghmm_dpseq_seq_get, _ghmmwrapper.ghmm_dpseq_seq_set)
    __swig_setmethods__["number_of_alphabets"] = _ghmmwrapper.ghmm_dpseq_number_of_alphabets_set
    __swig_getmethods__["number_of_alphabets"] = _ghmmwrapper.ghmm_dpseq_number_of_alphabets_get
    if _newclass:
        number_of_alphabets = _swig_property(_ghmmwrapper.ghmm_dpseq_number_of_alphabets_get, _ghmmwrapper.ghmm_dpseq_number_of_alphabets_set)
    __swig_setmethods__["d_value"] = _ghmmwrapper.ghmm_dpseq_d_value_set
    __swig_getmethods__["d_value"] = _ghmmwrapper.ghmm_dpseq_d_value_get
    if _newclass:
        d_value = _swig_property(_ghmmwrapper.ghmm_dpseq_d_value_get, _ghmmwrapper.ghmm_dpseq_d_value_set)
    __swig_setmethods__["number_of_d_seqs"] = _ghmmwrapper.ghmm_dpseq_number_of_d_seqs_set
    __swig_getmethods__["number_of_d_seqs"] = _ghmmwrapper.ghmm_dpseq_number_of_d_seqs_get
    if _newclass:
        number_of_d_seqs = _swig_property(_ghmmwrapper.ghmm_dpseq_number_of_d_seqs_get, _ghmmwrapper.ghmm_dpseq_number_of_d_seqs_set)
    __swig_setmethods__["length"] = _ghmmwrapper.ghmm_dpseq_length_set
    __swig_getmethods__["length"] = _ghmmwrapper.ghmm_dpseq_length_get
    if _newclass:
        length = _swig_property(_ghmmwrapper.ghmm_dpseq_length_get, _ghmmwrapper.ghmm_dpseq_length_set)

    def __init__(self, length, number_alphabets, number_dseqs):
        this = _ghmmwrapper.new_ghmm_dpseq(length, number_alphabets, number_dseqs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ghmmwrapper.delete_ghmm_dpseq
    __del__ = lambda self: None

    def set_discrete(self, index, int_seq):
        return _ghmmwrapper.ghmm_dpseq_set_discrete(self, index, int_seq)

    def set_continuous(self, index, d_seq):
        return _ghmmwrapper.ghmm_dpseq_set_continuous(self, index, d_seq)

    def get_discrete(self, index):
        return _ghmmwrapper.ghmm_dpseq_get_discrete(self, index)

    def get_continuous(self, index):
        return _ghmmwrapper.ghmm_dpseq_get_continuous(self, index)

    def slice(self, start, stop):
        return _ghmmwrapper.ghmm_dpseq_slice(self, start, stop)

    def get_char(self, alphabet, index):
        return _ghmmwrapper.ghmm_dpseq_get_char(self, alphabet, index)

    def get_double(self, seq_index, index):
        return _ghmmwrapper.ghmm_dpseq_get_double(self, seq_index, index)
ghmm_dpseq_swigregister = _ghmmwrapper.ghmm_dpseq_swigregister
ghmm_dpseq_swigregister(ghmm_dpseq)


def ghmm_dpseq_free(sq):
    return _ghmmwrapper.ghmm_dpseq_free(sq)
ghmm_dpseq_free = _ghmmwrapper.ghmm_dpseq_free
normal = _ghmmwrapper.normal
normal_right = _ghmmwrapper.normal_right
normal_approx = _ghmmwrapper.normal_approx
normal_left = _ghmmwrapper.normal_left
uniform = _ghmmwrapper.uniform
binormal = _ghmmwrapper.binormal
multinormal = _ghmmwrapper.multinormal
density_number = _ghmmwrapper.density_number

def density_array_alloc(length):
    return _ghmmwrapper.density_array_alloc(length)
density_array_alloc = _ghmmwrapper.density_array_alloc

def density_array_getitem(arg1, index):
    return _ghmmwrapper.density_array_getitem(arg1, index)
density_array_getitem = _ghmmwrapper.density_array_getitem

def density_array_setitem(arg1, index, value):
    return _ghmmwrapper.density_array_setitem(arg1, index, value)
density_array_setitem = _ghmmwrapper.density_array_setitem
class ghmm_c_emission(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ghmm_c_emission, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ghmm_c_emission, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _ghmmwrapper.ghmm_c_emission_type_set
    __swig_getmethods__["type"] = _ghmmwrapper.ghmm_c_emission_type_get
    if _newclass:
        type = _swig_property(_ghmmwrapper.ghmm_c_emission_type_get, _ghmmwrapper.ghmm_c_emission_type_set)
    __swig_setmethods__["dimension"] = _ghmmwrapper.ghmm_c_emission_dimension_set
    __swig_getmethods__["dimension"] = _ghmmwrapper.ghmm_c_emission_dimension_get
    if _newclass:
        dimension = _swig_property(_ghmmwrapper.ghmm_c_emission_dimension_get, _ghmmwrapper.ghmm_c_emission_dimension_set)
    __swig_getmethods__["mean"] = _ghmmwrapper.ghmm_c_emission_mean_get
    if _newclass:
        mean = _swig_property(_ghmmwrapper.ghmm_c_emission_mean_get)
    __swig_getmethods__["variance"] = _ghmmwrapper.ghmm_c_emission_variance_get
    if _newclass:
        variance = _swig_property(_ghmmwrapper.ghmm_c_emission_variance_get)
    __swig_setmethods__["sigmainv"] = _ghmmwrapper.ghmm_c_emission_sigmainv_set
    __swig_getmethods__["sigmainv"] = _ghmmwrapper.ghmm_c_emission_sigmainv_get
    if _newclass:
        sigmainv = _swig_property(_ghmmwrapper.ghmm_c_emission_sigmainv_get, _ghmmwrapper.ghmm_c_emission_sigmainv_set)
    __swig_setmethods__["det"] = _ghmmwrapper.ghmm_c_emission_det_set
    __swig_getmethods__["det"] = _ghmmwrapper.ghmm_c_emission_det_get
    if _newclass:
        det = _swig_property(_ghmmwrapper.ghmm_c_emission_det_get, _ghmmwrapper.ghmm_c_emission_det_set)
    __swig_setmethods__["sigmacd"] = _ghmmwrapper.ghmm_c_emission_sigmacd_set
    __swig_getmethods__["sigmacd"] = _ghmmwrapper.ghmm_c_emission_sigmacd_get
    if _newclass:
        sigmacd = _swig_property(_ghmmwrapper.ghmm_c_emission_sigmacd_get, _ghmmwrapper.ghmm_c_emission_sigmacd_set)
    __swig_setmethods__["min"] = _ghmmwrapper.ghmm_c_emission_min_set
    __swig_getmethods__["min"] = _ghmmwrapper.ghmm_c_emission_min_get
    if _newclass:
        min = _swig_property(_ghmmwrapper.ghmm_c_emission_min_get, _ghmmwrapper.ghmm_c_emission_min_set)
    __swig_setmethods__["max"] = _ghmmwrapper.ghmm_c_emission_max_set
    __swig_getmethods__["max"] = _ghmmwrapper.ghmm_c_emission_max_get
    if _newclass:
        max = _swig_property(_ghmmwrapper.ghmm_c_emission_max_get, _ghmmwrapper.ghmm_c_emission_max_set)
    __swig_setmethods__["fixed"] = _ghmmwrapper.ghmm_c_emission_fixed_set
    __swig_getmethods__["fixed"] = _ghmmwrapper.ghmm_c_emission_fixed_get
    if _newclass:
        fixed = _swig_property(_ghmmwrapper.ghmm_c_emission_fixed_get, _ghmmwrapper.ghmm_c_emission_fixed_set)

    def setDensity(self, value):
        return _ghmmwrapper.ghmm_c_emission_setDensity(self, value)

    def getDensity(self):
        return _ghmmwrapper.ghmm_c_emission_getDensity(self)

    def getMeanVec(self):
        return _ghmmwrapper.ghmm_c_emission_getMeanVec(self)

    def __init__(self):
        this = _ghmmwrapper.new_ghmm_c_emission()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ghmmwrapper.delete_ghmm_c_emission
    __del__ = lambda self: None
ghmm_c_emission_swigregister = _ghmmwrapper.ghmm_c_emission_swigregister
ghmm_c_emission_swigregister(ghmm_c_emission)

class ghmm_c_emission_variance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ghmm_c_emission_variance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ghmm_c_emission_variance, name)
    __repr__ = _swig_repr
    __swig_setmethods__["val"] = _ghmmwrapper.ghmm_c_emission_variance_val_set
    __swig_getmethods__["val"] = _ghmmwrapper.ghmm_c_emission_variance_val_get
    if _newclass:
        val = _swig_property(_ghmmwrapper.ghmm_c_emission_variance_val_get, _ghmmwrapper.ghmm_c_emission_variance_val_set)
    __swig_setmethods__["mat"] = _ghmmwrapper.ghmm_c_emission_variance_mat_set
    __swig_getmethods__["mat"] = _ghmmwrapper.ghmm_c_emission_variance_mat_get
    if _newclass:
        mat = _swig_property(_ghmmwrapper.ghmm_c_emission_variance_mat_get, _ghmmwrapper.ghmm_c_emission_variance_mat_set)

    def __init__(self):
        this = _ghmmwrapper.new_ghmm_c_emission_variance()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ghmmwrapper.delete_ghmm_c_emission_variance
    __del__ = lambda self: None
ghmm_c_emission_variance_swigregister = _ghmmwrapper.ghmm_c_emission_variance_swigregister
ghmm_c_emission_variance_swigregister(ghmm_c_emission_variance)

class ghmm_c_emission_mean(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ghmm_c_emission_mean, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ghmm_c_emission_mean, name)
    __repr__ = _swig_repr
    __swig_setmethods__["val"] = _ghmmwrapper.ghmm_c_emission_mean_val_set
    __swig_getmethods__["val"] = _ghmmwrapper.ghmm_c_emission_mean_val_get
    if _newclass:
        val = _swig_property(_ghmmwrapper.ghmm_c_emission_mean_val_get, _ghmmwrapper.ghmm_c_emission_mean_val_set)
    __swig_setmethods__["vec"] = _ghmmwrapper.ghmm_c_emission_mean_vec_set
    __swig_getmethods__["vec"] = _ghmmwrapper.ghmm_c_emission_mean_vec_get
    if _newclass:
        vec = _swig_property(_ghmmwrapper.ghmm_c_emission_mean_vec_get, _ghmmwrapper.ghmm_c_emission_mean_vec_set)

    def __init__(self):
        this = _ghmmwrapper.new_ghmm_c_emission_mean()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ghmmwrapper.delete_ghmm_c_emission_mean
    __del__ = lambda self: None
ghmm_c_emission_mean_swigregister = _ghmmwrapper.ghmm_c_emission_mean_swigregister
ghmm_c_emission_mean_swigregister(ghmm_c_emission_mean)


def c_emission_array_alloc(number):
    return _ghmmwrapper.c_emission_array_alloc(number)
c_emission_array_alloc = _ghmmwrapper.c_emission_array_alloc

def c_emission_array_getRef(arg1, index):
    return _ghmmwrapper.c_emission_array_getRef(arg1, index)
c_emission_array_getRef = _ghmmwrapper.c_emission_array_getRef

def c_emission_ptr_array_alloc(number):
    return _ghmmwrapper.c_emission_ptr_array_alloc(number)
c_emission_ptr_array_alloc = _ghmmwrapper.c_emission_ptr_array_alloc

def c_emission_ptr_array_getitem(arg1, index):
    return _ghmmwrapper.c_emission_ptr_array_getitem(arg1, index)
c_emission_ptr_array_getitem = _ghmmwrapper.c_emission_ptr_array_getitem

def c_emission_ptr_array_setitem(arg1, index, value):
    return _ghmmwrapper.c_emission_ptr_array_setitem(arg1, index, value)
c_emission_ptr_array_setitem = _ghmmwrapper.c_emission_ptr_array_setitem

def ighmm_invert_det(sigmainv, det, length, cov):
    return _ghmmwrapper.ighmm_invert_det(sigmainv, det, length, cov)
ighmm_invert_det = _ghmmwrapper.ighmm_invert_det
class ghmm_cstate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ghmm_cstate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ghmm_cstate, name)
    __repr__ = _swig_repr
    __swig_setmethods__["M"] = _ghmmwrapper.ghmm_cstate_M_set
    __swig_getmethods__["M"] = _ghmmwrapper.ghmm_cstate_M_get
    if _newclass:
        M = _swig_property(_ghmmwrapper.ghmm_cstate_M_get, _ghmmwrapper.ghmm_cstate_M_set)
    __swig_setmethods__["pi"] = _ghmmwrapper.ghmm_cstate_pi_set
    __swig_getmethods__["pi"] = _ghmmwrapper.ghmm_cstate_pi_get
    if _newclass:
        pi = _swig_property(_ghmmwrapper.ghmm_cstate_pi_get, _ghmmwrapper.ghmm_cstate_pi_set)
    __swig_setmethods__["out_id"] = _ghmmwrapper.ghmm_cstate_out_id_set
    __swig_getmethods__["out_id"] = _ghmmwrapper.ghmm_cstate_out_id_get
    if _newclass:
        out_id = _swig_property(_ghmmwrapper.ghmm_cstate_out_id_get, _ghmmwrapper.ghmm_cstate_out_id_set)
    __swig_setmethods__["in_id"] = _ghmmwrapper.ghmm_cstate_in_id_set
    __swig_getmethods__["in_id"] = _ghmmwrapper.ghmm_cstate_in_id_get
    if _newclass:
        in_id = _swig_property(_ghmmwrapper.ghmm_cstate_in_id_get, _ghmmwrapper.ghmm_cstate_in_id_set)
    __swig_setmethods__["out_a"] = _ghmmwrapper.ghmm_cstate_out_a_set
    __swig_getmethods__["out_a"] = _ghmmwrapper.ghmm_cstate_out_a_get
    if _newclass:
        out_a = _swig_property(_ghmmwrapper.ghmm_cstate_out_a_get, _ghmmwrapper.ghmm_cstate_out_a_set)
    __swig_setmethods__["in_a"] = _ghmmwrapper.ghmm_cstate_in_a_set
    __swig_getmethods__["in_a"] = _ghmmwrapper.ghmm_cstate_in_a_get
    if _newclass:
        in_a = _swig_property(_ghmmwrapper.ghmm_cstate_in_a_get, _ghmmwrapper.ghmm_cstate_in_a_set)
    __swig_setmethods__["out_states"] = _ghmmwrapper.ghmm_cstate_out_states_set
    __swig_getmethods__["out_states"] = _ghmmwrapper.ghmm_cstate_out_states_get
    if _newclass:
        out_states = _swig_property(_ghmmwrapper.ghmm_cstate_out_states_get, _ghmmwrapper.ghmm_cstate_out_states_set)
    __swig_setmethods__["in_states"] = _ghmmwrapper.ghmm_cstate_in_states_set
    __swig_getmethods__["in_states"] = _ghmmwrapper.ghmm_cstate_in_states_get
    if _newclass:
        in_states = _swig_property(_ghmmwrapper.ghmm_cstate_in_states_get, _ghmmwrapper.ghmm_cstate_in_states_set)
    __swig_setmethods__["c"] = _ghmmwrapper.ghmm_cstate_c_set
    __swig_getmethods__["c"] = _ghmmwrapper.ghmm_cstate_c_get
    if _newclass:
        c = _swig_property(_ghmmwrapper.ghmm_cstate_c_get, _ghmmwrapper.ghmm_cstate_c_set)
    __swig_setmethods__["fix"] = _ghmmwrapper.ghmm_cstate_fix_set
    __swig_getmethods__["fix"] = _ghmmwrapper.ghmm_cstate_fix_get
    if _newclass:
        fix = _swig_property(_ghmmwrapper.ghmm_cstate_fix_get, _ghmmwrapper.ghmm_cstate_fix_set)
    __swig_setmethods__["e"] = _ghmmwrapper.ghmm_cstate_e_set
    __swig_getmethods__["e"] = _ghmmwrapper.ghmm_cstate_e_get
    if _newclass:
        e = _swig_property(_ghmmwrapper.ghmm_cstate_e_get, _ghmmwrapper.ghmm_cstate_e_set)
    __swig_setmethods__["desc"] = _ghmmwrapper.ghmm_cstate_desc_set
    __swig_getmethods__["desc"] = _ghmmwrapper.ghmm_cstate_desc_get
    if _newclass:
        desc = _swig_property(_ghmmwrapper.ghmm_cstate_desc_get, _ghmmwrapper.ghmm_cstate_desc_set)
    __swig_setmethods__["xPosition"] = _ghmmwrapper.ghmm_cstate_xPosition_set
    __swig_getmethods__["xPosition"] = _ghmmwrapper.ghmm_cstate_xPosition_get
    if _newclass:
        xPosition = _swig_property(_ghmmwrapper.ghmm_cstate_xPosition_get, _ghmmwrapper.ghmm_cstate_xPosition_set)
    __swig_setmethods__["yPosition"] = _ghmmwrapper.ghmm_cstate_yPosition_set
    __swig_getmethods__["yPosition"] = _ghmmwrapper.ghmm_cstate_yPosition_get
    if _newclass:
        yPosition = _swig_property(_ghmmwrapper.ghmm_cstate_yPosition_get, _ghmmwrapper.ghmm_cstate_yPosition_set)

    def alloc(self, M, in_states, out_states, cos):
        return _ghmmwrapper.ghmm_cstate_alloc(self, M, in_states, out_states, cos)

    def setDensity(self, i, type):
        return _ghmmwrapper.ghmm_cstate_setDensity(self, i, type)

    def setWeight(self, i, value):
        return _ghmmwrapper.ghmm_cstate_setWeight(self, i, value)

    def setMean(self, i, value):
        return _ghmmwrapper.ghmm_cstate_setMean(self, i, value)

    def setStdDev(self, i, value):
        return _ghmmwrapper.ghmm_cstate_setStdDev(self, i, value)

    def getDensity(self, i):
        return _ghmmwrapper.ghmm_cstate_getDensity(self, i)

    def getWeight(self, i):
        return _ghmmwrapper.ghmm_cstate_getWeight(self, i)

    def getMean(self, i):
        return _ghmmwrapper.ghmm_cstate_getMean(self, i)

    def getStdDev(self, i):
        return _ghmmwrapper.ghmm_cstate_getStdDev(self, i)

    def setMin(self, *args):
        return _ghmmwrapper.ghmm_cstate_setMin(self, *args)

    def setMax(self, *args):
        return _ghmmwrapper.ghmm_cstate_setMax(self, *args)

    def getInState(self, index):
        return _ghmmwrapper.ghmm_cstate_getInState(self, index)

    def getOutState(self, index):
        return _ghmmwrapper.ghmm_cstate_getOutState(self, index)

    def getInProb(self, *args):
        return _ghmmwrapper.ghmm_cstate_getInProb(self, *args)

    def getOutProb(self, *args):
        return _ghmmwrapper.ghmm_cstate_getOutProb(self, *args)

    def setInProb(self, index, c, prob):
        return _ghmmwrapper.ghmm_cstate_setInProb(self, index, c, prob)

    def setOutProb(self, index, c, prob):
        return _ghmmwrapper.ghmm_cstate_setOutProb(self, index, c, prob)

    def getEmission(self, index):
        return _ghmmwrapper.ghmm_cstate_getEmission(self, index)

    def calc_cmbm(self, m, omega):
        return _ghmmwrapper.ghmm_cstate_calc_cmbm(self, m, omega)

    def calc_b(self, omega):
        return _ghmmwrapper.ghmm_cstate_calc_b(self, omega)

    def calc_cmBm(self, m, omega):
        return _ghmmwrapper.ghmm_cstate_calc_cmBm(self, m, omega)

    def calc_B(self, omega):
        return _ghmmwrapper.ghmm_cstate_calc_B(self, omega)

    def getDesc(self):
        return _ghmmwrapper.ghmm_cstate_getDesc(self)

    def setDesc(self, name):
        return _ghmmwrapper.ghmm_cstate_setDesc(self, name)

    def __init__(self):
        this = _ghmmwrapper.new_ghmm_cstate()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ghmmwrapper.delete_ghmm_cstate
    __del__ = lambda self: None
ghmm_cstate_swigregister = _ghmmwrapper.ghmm_cstate_swigregister
ghmm_cstate_swigregister(ghmm_cstate)


def cstate_array_alloc(number):
    return _ghmmwrapper.cstate_array_alloc(number)
cstate_array_alloc = _ghmmwrapper.cstate_array_alloc

def cstate_array_getRef(arg1, index):
    return _ghmmwrapper.cstate_array_getRef(arg1, index)
cstate_array_getRef = _ghmmwrapper.cstate_array_getRef

def cstate_ptr_array_alloc(number):
    return _ghmmwrapper.cstate_ptr_array_alloc(number)
cstate_ptr_array_alloc = _ghmmwrapper.cstate_ptr_array_alloc

def cstate_ptr_array_getitem(arg1, index):
    return _ghmmwrapper.cstate_ptr_array_getitem(arg1, index)
cstate_ptr_array_getitem = _ghmmwrapper.cstate_ptr_array_getitem

def cstate_ptr_array_setitem(arg1, index, value):
    return _ghmmwrapper.cstate_ptr_array_setitem(arg1, index, value)
cstate_ptr_array_setitem = _ghmmwrapper.cstate_ptr_array_setitem
class ghmm_cmodel_class_change_context(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ghmm_cmodel_class_change_context, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ghmm_cmodel_class_change_context, name)
    __repr__ = _swig_repr
    __swig_setmethods__["python_module"] = _ghmmwrapper.ghmm_cmodel_class_change_context_python_module_set
    __swig_getmethods__["python_module"] = _ghmmwrapper.ghmm_cmodel_class_change_context_python_module_get
    if _newclass:
        python_module = _swig_property(_ghmmwrapper.ghmm_cmodel_class_change_context_python_module_get, _ghmmwrapper.ghmm_cmodel_class_change_context_python_module_set)
    __swig_setmethods__["python_function"] = _ghmmwrapper.ghmm_cmodel_class_change_context_python_function_set
    __swig_getmethods__["python_function"] = _ghmmwrapper.ghmm_cmodel_class_change_context_python_function_get
    if _newclass:
        python_function = _swig_property(_ghmmwrapper.ghmm_cmodel_class_change_context_python_function_get, _ghmmwrapper.ghmm_cmodel_class_change_context_python_function_set)
    __swig_setmethods__["k"] = _ghmmwrapper.ghmm_cmodel_class_change_context_k_set
    __swig_getmethods__["k"] = _ghmmwrapper.ghmm_cmodel_class_change_context_k_get
    if _newclass:
        k = _swig_property(_ghmmwrapper.ghmm_cmodel_class_change_context_k_get, _ghmmwrapper.ghmm_cmodel_class_change_context_k_set)
    __swig_setmethods__["get_class"] = _ghmmwrapper.ghmm_cmodel_class_change_context_get_class_set
    __swig_getmethods__["get_class"] = _ghmmwrapper.ghmm_cmodel_class_change_context_get_class_get
    if _newclass:
        get_class = _swig_property(_ghmmwrapper.ghmm_cmodel_class_change_context_get_class_get, _ghmmwrapper.ghmm_cmodel_class_change_context_get_class_set)
    __swig_setmethods__["user_data"] = _ghmmwrapper.ghmm_cmodel_class_change_context_user_data_set
    __swig_getmethods__["user_data"] = _ghmmwrapper.ghmm_cmodel_class_change_context_user_data_get
    if _newclass:
        user_data = _swig_property(_ghmmwrapper.ghmm_cmodel_class_change_context_user_data_get, _ghmmwrapper.ghmm_cmodel_class_change_context_user_data_set)

    def __init__(self):
        this = _ghmmwrapper.new_ghmm_cmodel_class_change_context()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ghmmwrapper.delete_ghmm_cmodel_class_change_context
    __del__ = lambda self: None
ghmm_cmodel_class_change_context_swigregister = _ghmmwrapper.ghmm_cmodel_class_change_context_swigregister
ghmm_cmodel_class_change_context_swigregister(ghmm_cmodel_class_change_context)

class ghmm_cmodel_baum_welch_context(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ghmm_cmodel_baum_welch_context, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ghmm_cmodel_baum_welch_context, name)
    __repr__ = _swig_repr
    __swig_setmethods__["smo"] = _ghmmwrapper.ghmm_cmodel_baum_welch_context_smo_set
    __swig_getmethods__["smo"] = _ghmmwrapper.ghmm_cmodel_baum_welch_context_smo_get
    if _newclass:
        smo = _swig_property(_ghmmwrapper.ghmm_cmodel_baum_welch_context_smo_get, _ghmmwrapper.ghmm_cmodel_baum_welch_context_smo_set)
    __swig_setmethods__["sqd"] = _ghmmwrapper.ghmm_cmodel_baum_welch_context_sqd_set
    __swig_getmethods__["sqd"] = _ghmmwrapper.ghmm_cmodel_baum_welch_context_sqd_get
    if _newclass:
        sqd = _swig_property(_ghmmwrapper.ghmm_cmodel_baum_welch_context_sqd_get, _ghmmwrapper.ghmm_cmodel_baum_welch_context_sqd_set)
    __swig_setmethods__["logp"] = _ghmmwrapper.ghmm_cmodel_baum_welch_context_logp_set
    __swig_getmethods__["logp"] = _ghmmwrapper.ghmm_cmodel_baum_welch_context_logp_get
    if _newclass:
        logp = _swig_property(_ghmmwrapper.ghmm_cmodel_baum_welch_context_logp_get, _ghmmwrapper.ghmm_cmodel_baum_welch_context_logp_set)
    __swig_setmethods__["eps"] = _ghmmwrapper.ghmm_cmodel_baum_welch_context_eps_set
    __swig_getmethods__["eps"] = _ghmmwrapper.ghmm_cmodel_baum_welch_context_eps_get
    if _newclass:
        eps = _swig_property(_ghmmwrapper.ghmm_cmodel_baum_welch_context_eps_get, _ghmmwrapper.ghmm_cmodel_baum_welch_context_eps_set)
    __swig_setmethods__["max_iter"] = _ghmmwrapper.ghmm_cmodel_baum_welch_context_max_iter_set
    __swig_getmethods__["max_iter"] = _ghmmwrapper.ghmm_cmodel_baum_welch_context_max_iter_get
    if _newclass:
        max_iter = _swig_property(_ghmmwrapper.ghmm_cmodel_baum_welch_context_max_iter_get, _ghmmwrapper.ghmm_cmodel_baum_welch_context_max_iter_set)

    def __init__(self, smo, sqd):
        this = _ghmmwrapper.new_ghmm_cmodel_baum_welch_context(smo, sqd)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ghmmwrapper.delete_ghmm_cmodel_baum_welch_context
    __del__ = lambda self: None
ghmm_cmodel_baum_welch_context_swigregister = _ghmmwrapper.ghmm_cmodel_baum_welch_context_swigregister
ghmm_cmodel_baum_welch_context_swigregister(ghmm_cmodel_baum_welch_context)

class ghmm_cmodel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ghmm_cmodel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ghmm_cmodel, name)
    __repr__ = _swig_repr
    __swig_setmethods__["N"] = _ghmmwrapper.ghmm_cmodel_N_set
    __swig_getmethods__["N"] = _ghmmwrapper.ghmm_cmodel_N_get
    if _newclass:
        N = _swig_property(_ghmmwrapper.ghmm_cmodel_N_get, _ghmmwrapper.ghmm_cmodel_N_set)
    __swig_setmethods__["M"] = _ghmmwrapper.ghmm_cmodel_M_set
    __swig_getmethods__["M"] = _ghmmwrapper.ghmm_cmodel_M_get
    if _newclass:
        M = _swig_property(_ghmmwrapper.ghmm_cmodel_M_get, _ghmmwrapper.ghmm_cmodel_M_set)
    __swig_setmethods__["dim"] = _ghmmwrapper.ghmm_cmodel_dim_set
    __swig_getmethods__["dim"] = _ghmmwrapper.ghmm_cmodel_dim_get
    if _newclass:
        dim = _swig_property(_ghmmwrapper.ghmm_cmodel_dim_get, _ghmmwrapper.ghmm_cmodel_dim_set)
    __swig_setmethods__["cos"] = _ghmmwrapper.ghmm_cmodel_cos_set
    __swig_getmethods__["cos"] = _ghmmwrapper.ghmm_cmodel_cos_get
    if _newclass:
        cos = _swig_property(_ghmmwrapper.ghmm_cmodel_cos_get, _ghmmwrapper.ghmm_cmodel_cos_set)
    __swig_setmethods__["prior"] = _ghmmwrapper.ghmm_cmodel_prior_set
    __swig_getmethods__["prior"] = _ghmmwrapper.ghmm_cmodel_prior_get
    if _newclass:
        prior = _swig_property(_ghmmwrapper.ghmm_cmodel_prior_get, _ghmmwrapper.ghmm_cmodel_prior_set)
    __swig_setmethods__["name"] = _ghmmwrapper.ghmm_cmodel_name_set
    __swig_getmethods__["name"] = _ghmmwrapper.ghmm_cmodel_name_get
    if _newclass:
        name = _swig_property(_ghmmwrapper.ghmm_cmodel_name_get, _ghmmwrapper.ghmm_cmodel_name_set)
    __swig_setmethods__["model_type"] = _ghmmwrapper.ghmm_cmodel_model_type_set
    __swig_getmethods__["model_type"] = _ghmmwrapper.ghmm_cmodel_model_type_get
    if _newclass:
        model_type = _swig_property(_ghmmwrapper.ghmm_cmodel_model_type_get, _ghmmwrapper.ghmm_cmodel_model_type_set)
    __swig_setmethods__["s"] = _ghmmwrapper.ghmm_cmodel_s_set
    __swig_getmethods__["s"] = _ghmmwrapper.ghmm_cmodel_s_get
    if _newclass:
        s = _swig_property(_ghmmwrapper.ghmm_cmodel_s_get, _ghmmwrapper.ghmm_cmodel_s_set)
    __swig_setmethods__["class_change"] = _ghmmwrapper.ghmm_cmodel_class_change_set
    __swig_getmethods__["class_change"] = _ghmmwrapper.ghmm_cmodel_class_change_get
    if _newclass:
        class_change = _swig_property(_ghmmwrapper.ghmm_cmodel_class_change_get, _ghmmwrapper.ghmm_cmodel_class_change_set)

    def __init__(self, *args):
        this = _ghmmwrapper.new_ghmm_cmodel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ghmmwrapper.delete_ghmm_cmodel
    __del__ = lambda self: None

    def write_xml(self, filename):
        return _ghmmwrapper.ghmm_cmodel_write_xml(self, filename)

    def forward(self, O, T, b, alpha, scale):
        return _ghmmwrapper.ghmm_cmodel_forward(self, O, T, b, alpha, scale)

    def backward(self, O, T, b, beta, scale):
        return _ghmmwrapper.ghmm_cmodel_backward(self, O, T, b, beta, scale)

    def logp(self, O, T):
        return _ghmmwrapper.ghmm_cmodel_logp(self, O, T)

    def logp_joint(self, O, len, S, slen):
        return _ghmmwrapper.ghmm_cmodel_logp_joint(self, O, len, S, slen)

    def class_change_alloc(self):
        return _ghmmwrapper.ghmm_cmodel_class_change_alloc(self)

    def get_random_var(self, state, m, x):
        return _ghmmwrapper.ghmm_cmodel_get_random_var(self, state, m, x)

    def generate_sequences(self, seed, global_len, seq_number, Tmax):
        return _ghmmwrapper.ghmm_cmodel_generate_sequences(self, seed, global_len, seq_number, Tmax)

    def likelihood(self, sqd):
        return _ghmmwrapper.ghmm_cmodel_likelihood(self, sqd)

    def individual_likelihoods(self, sqd, log_ps):
        return _ghmmwrapper.ghmm_cmodel_individual_likelihoods(self, sqd, log_ps)

    def prob_distance(self, cm, maxT, symmetric, verbose):
        return _ghmmwrapper.ghmm_cmodel_prob_distance(self, cm, maxT, symmetric, verbose)

    def get_interval_B(self, state, a, b):
        return _ghmmwrapper.ghmm_cmodel_get_interval_B(self, state, a, b)

    def normalize(self):
        return _ghmmwrapper.ghmm_cmodel_normalize(self)

    def get_transition(self, i, j, c):
        return _ghmmwrapper.ghmm_cmodel_get_transition(self, i, j, c)

    def check_transition(self, i, j, c):
        return _ghmmwrapper.ghmm_cmodel_check_transition(self, i, j, c)

    def set_transition(self, i, j, c, prob):
        return _ghmmwrapper.ghmm_cmodel_set_transition(self, i, j, c, prob)

    def viterbi(self, O, T):
        return _ghmmwrapper.ghmm_cmodel_viterbi(self, O, T)

    def getState(self, index):
        return _ghmmwrapper.ghmm_cmodel_getState(self, index)

    def addModelTypeFlags(self, flags):
        return _ghmmwrapper.ghmm_cmodel_addModelTypeFlags(self, flags)

    def removeModelTypeFlags(self, flags):
        return _ghmmwrapper.ghmm_cmodel_removeModelTypeFlags(self, flags)

    def getStateName(self, index):
        return _ghmmwrapper.ghmm_cmodel_getStateName(self, index)

    def setStateName(self, index, name):
        return _ghmmwrapper.ghmm_cmodel_setStateName(self, index, name)
ghmm_cmodel_swigregister = _ghmmwrapper.ghmm_cmodel_swigregister
ghmm_cmodel_swigregister(ghmm_cmodel)


def ghmm_cmodel_free(smo):
    return _ghmmwrapper.ghmm_cmodel_free(smo)
ghmm_cmodel_free = _ghmmwrapper.ghmm_cmodel_free

def ghmm_cmodel_xml_write(smo, file, smo_number):
    return _ghmmwrapper.ghmm_cmodel_xml_write(smo, file, smo_number)
ghmm_cmodel_xml_write = _ghmmwrapper.ghmm_cmodel_xml_write

def ghmm_cmodel_baum_welch(cs):
    return _ghmmwrapper.ghmm_cmodel_baum_welch(cs)
ghmm_cmodel_baum_welch = _ghmmwrapper.ghmm_cmodel_baum_welch

def cmodel_array_alloc(number):
    return _ghmmwrapper.cmodel_array_alloc(number)
cmodel_array_alloc = _ghmmwrapper.cmodel_array_alloc

def cmodel_array_getRef(arg1, index):
    return _ghmmwrapper.cmodel_array_getRef(arg1, index)
cmodel_array_getRef = _ghmmwrapper.cmodel_array_getRef

def cmodel_ptr_array_alloc(number):
    return _ghmmwrapper.cmodel_ptr_array_alloc(number)
cmodel_ptr_array_alloc = _ghmmwrapper.cmodel_ptr_array_alloc

def cmodel_ptr_array_getitem(arg1, index):
    return _ghmmwrapper.cmodel_ptr_array_getitem(arg1, index)
cmodel_ptr_array_getitem = _ghmmwrapper.cmodel_ptr_array_getitem

def cmodel_ptr_array_setitem(arg1, index, value):
    return _ghmmwrapper.cmodel_ptr_array_setitem(arg1, index, value)
cmodel_ptr_array_setitem = _ghmmwrapper.cmodel_ptr_array_setitem
class ghmm_dbackground(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ghmm_dbackground, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ghmm_dbackground, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n"] = _ghmmwrapper.ghmm_dbackground_n_set
    __swig_getmethods__["n"] = _ghmmwrapper.ghmm_dbackground_n_get
    if _newclass:
        n = _swig_property(_ghmmwrapper.ghmm_dbackground_n_get, _ghmmwrapper.ghmm_dbackground_n_set)
    __swig_setmethods__["m"] = _ghmmwrapper.ghmm_dbackground_m_set
    __swig_getmethods__["m"] = _ghmmwrapper.ghmm_dbackground_m_get
    if _newclass:
        m = _swig_property(_ghmmwrapper.ghmm_dbackground_m_get, _ghmmwrapper.ghmm_dbackground_m_set)
    __swig_setmethods__["order"] = _ghmmwrapper.ghmm_dbackground_order_set
    __swig_getmethods__["order"] = _ghmmwrapper.ghmm_dbackground_order_get
    if _newclass:
        order = _swig_property(_ghmmwrapper.ghmm_dbackground_order_get, _ghmmwrapper.ghmm_dbackground_order_set)
    __swig_setmethods__["b"] = _ghmmwrapper.ghmm_dbackground_b_set
    __swig_getmethods__["b"] = _ghmmwrapper.ghmm_dbackground_b_get
    if _newclass:
        b = _swig_property(_ghmmwrapper.ghmm_dbackground_b_get, _ghmmwrapper.ghmm_dbackground_b_set)
    __swig_setmethods__["name"] = _ghmmwrapper.ghmm_dbackground_name_set
    __swig_getmethods__["name"] = _ghmmwrapper.ghmm_dbackground_name_get
    if _newclass:
        name = _swig_property(_ghmmwrapper.ghmm_dbackground_name_get, _ghmmwrapper.ghmm_dbackground_name_set)

    def __init__(self, n, m, orders, B):
        this = _ghmmwrapper.new_ghmm_dbackground(n, m, orders, B)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ghmmwrapper.delete_ghmm_dbackground
    __del__ = lambda self: None

    def copy(self):
        return _ghmmwrapper.ghmm_dbackground_copy(self)

    def getOrder(self, index):
        return _ghmmwrapper.ghmm_dbackground_getOrder(self, index)

    def getWeights(self, index):
        return _ghmmwrapper.ghmm_dbackground_getWeights(self, index)

    def getName(self, index):
        return _ghmmwrapper.ghmm_dbackground_getName(self, index)

    def setName(self, index, value):
        return _ghmmwrapper.ghmm_dbackground_setName(self, index, value)
ghmm_dbackground_swigregister = _ghmmwrapper.ghmm_dbackground_swigregister
ghmm_dbackground_swigregister(ghmm_dbackground)


def ghmm_dbackground_alloc(n, m, orders, B):
    return _ghmmwrapper.ghmm_dbackground_alloc(n, m, orders, B)
ghmm_dbackground_alloc = _ghmmwrapper.ghmm_dbackground_alloc
class ghmm_dstate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ghmm_dstate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ghmm_dstate, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pi"] = _ghmmwrapper.ghmm_dstate_pi_set
    __swig_getmethods__["pi"] = _ghmmwrapper.ghmm_dstate_pi_get
    if _newclass:
        pi = _swig_property(_ghmmwrapper.ghmm_dstate_pi_get, _ghmmwrapper.ghmm_dstate_pi_set)
    __swig_setmethods__["b"] = _ghmmwrapper.ghmm_dstate_b_set
    __swig_getmethods__["b"] = _ghmmwrapper.ghmm_dstate_b_get
    if _newclass:
        b = _swig_property(_ghmmwrapper.ghmm_dstate_b_get, _ghmmwrapper.ghmm_dstate_b_set)
    __swig_setmethods__["out_id"] = _ghmmwrapper.ghmm_dstate_out_id_set
    __swig_getmethods__["out_id"] = _ghmmwrapper.ghmm_dstate_out_id_get
    if _newclass:
        out_id = _swig_property(_ghmmwrapper.ghmm_dstate_out_id_get, _ghmmwrapper.ghmm_dstate_out_id_set)
    __swig_setmethods__["in_id"] = _ghmmwrapper.ghmm_dstate_in_id_set
    __swig_getmethods__["in_id"] = _ghmmwrapper.ghmm_dstate_in_id_get
    if _newclass:
        in_id = _swig_property(_ghmmwrapper.ghmm_dstate_in_id_get, _ghmmwrapper.ghmm_dstate_in_id_set)
    __swig_setmethods__["out_a"] = _ghmmwrapper.ghmm_dstate_out_a_set
    __swig_getmethods__["out_a"] = _ghmmwrapper.ghmm_dstate_out_a_get
    if _newclass:
        out_a = _swig_property(_ghmmwrapper.ghmm_dstate_out_a_get, _ghmmwrapper.ghmm_dstate_out_a_set)
    __swig_setmethods__["in_a"] = _ghmmwrapper.ghmm_dstate_in_a_set
    __swig_getmethods__["in_a"] = _ghmmwrapper.ghmm_dstate_in_a_get
    if _newclass:
        in_a = _swig_property(_ghmmwrapper.ghmm_dstate_in_a_get, _ghmmwrapper.ghmm_dstate_in_a_set)
    __swig_setmethods__["out_states"] = _ghmmwrapper.ghmm_dstate_out_states_set
    __swig_getmethods__["out_states"] = _ghmmwrapper.ghmm_dstate_out_states_get
    if _newclass:
        out_states = _swig_property(_ghmmwrapper.ghmm_dstate_out_states_get, _ghmmwrapper.ghmm_dstate_out_states_set)
    __swig_setmethods__["in_states"] = _ghmmwrapper.ghmm_dstate_in_states_set
    __swig_getmethods__["in_states"] = _ghmmwrapper.ghmm_dstate_in_states_get
    if _newclass:
        in_states = _swig_property(_ghmmwrapper.ghmm_dstate_in_states_get, _ghmmwrapper.ghmm_dstate_in_states_set)
    __swig_setmethods__["fix"] = _ghmmwrapper.ghmm_dstate_fix_set
    __swig_getmethods__["fix"] = _ghmmwrapper.ghmm_dstate_fix_get
    if _newclass:
        fix = _swig_property(_ghmmwrapper.ghmm_dstate_fix_get, _ghmmwrapper.ghmm_dstate_fix_set)
    __swig_setmethods__["desc"] = _ghmmwrapper.ghmm_dstate_desc_set
    __swig_getmethods__["desc"] = _ghmmwrapper.ghmm_dstate_desc_get
    if _newclass:
        desc = _swig_property(_ghmmwrapper.ghmm_dstate_desc_get, _ghmmwrapper.ghmm_dstate_desc_set)
    __swig_setmethods__["xPosition"] = _ghmmwrapper.ghmm_dstate_xPosition_set
    __swig_getmethods__["xPosition"] = _ghmmwrapper.ghmm_dstate_xPosition_get
    if _newclass:
        xPosition = _swig_property(_ghmmwrapper.ghmm_dstate_xPosition_get, _ghmmwrapper.ghmm_dstate_xPosition_set)
    __swig_setmethods__["yPosition"] = _ghmmwrapper.ghmm_dstate_yPosition_set
    __swig_getmethods__["yPosition"] = _ghmmwrapper.ghmm_dstate_yPosition_get
    if _newclass:
        yPosition = _swig_property(_ghmmwrapper.ghmm_dstate_yPosition_get, _ghmmwrapper.ghmm_dstate_yPosition_set)

    def clean(self):
        return _ghmmwrapper.ghmm_dstate_clean(self)

    def getInState(self, index):
        return _ghmmwrapper.ghmm_dstate_getInState(self, index)

    def getOutState(self, index):
        return _ghmmwrapper.ghmm_dstate_getOutState(self, index)

    def getInProb(self, index):
        return _ghmmwrapper.ghmm_dstate_getInProb(self, index)

    def getOutProb(self, index):
        return _ghmmwrapper.ghmm_dstate_getOutProb(self, index)

    def getDesc(self):
        return _ghmmwrapper.ghmm_dstate_getDesc(self)

    def setDesc(self, name):
        return _ghmmwrapper.ghmm_dstate_setDesc(self, name)

    def __init__(self):
        this = _ghmmwrapper.new_ghmm_dstate()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ghmmwrapper.delete_ghmm_dstate
    __del__ = lambda self: None
ghmm_dstate_swigregister = _ghmmwrapper.ghmm_dstate_swigregister
ghmm_dstate_swigregister(ghmm_dstate)


def dstate_array_alloc(number):
    return _ghmmwrapper.dstate_array_alloc(number)
dstate_array_alloc = _ghmmwrapper.dstate_array_alloc

def dstate_array_getRef(arg1, index):
    return _ghmmwrapper.dstate_array_getRef(arg1, index)
dstate_array_getRef = _ghmmwrapper.dstate_array_getRef

def dstate_ptr_array_alloc(number):
    return _ghmmwrapper.dstate_ptr_array_alloc(number)
dstate_ptr_array_alloc = _ghmmwrapper.dstate_ptr_array_alloc

def dstate_ptr_array_getitem(arg1, index):
    return _ghmmwrapper.dstate_ptr_array_getitem(arg1, index)
dstate_ptr_array_getitem = _ghmmwrapper.dstate_ptr_array_getitem

def dstate_ptr_array_setitem(arg1, index, value):
    return _ghmmwrapper.dstate_ptr_array_setitem(arg1, index, value)
dstate_ptr_array_setitem = _ghmmwrapper.dstate_ptr_array_setitem
class ghmm_dmodel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ghmm_dmodel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ghmm_dmodel, name)
    __repr__ = _swig_repr
    __swig_setmethods__["N"] = _ghmmwrapper.ghmm_dmodel_N_set
    __swig_getmethods__["N"] = _ghmmwrapper.ghmm_dmodel_N_get
    if _newclass:
        N = _swig_property(_ghmmwrapper.ghmm_dmodel_N_get, _ghmmwrapper.ghmm_dmodel_N_set)
    __swig_setmethods__["M"] = _ghmmwrapper.ghmm_dmodel_M_set
    __swig_getmethods__["M"] = _ghmmwrapper.ghmm_dmodel_M_get
    if _newclass:
        M = _swig_property(_ghmmwrapper.ghmm_dmodel_M_get, _ghmmwrapper.ghmm_dmodel_M_set)
    __swig_setmethods__["s"] = _ghmmwrapper.ghmm_dmodel_s_set
    __swig_getmethods__["s"] = _ghmmwrapper.ghmm_dmodel_s_get
    if _newclass:
        s = _swig_property(_ghmmwrapper.ghmm_dmodel_s_get, _ghmmwrapper.ghmm_dmodel_s_set)
    __swig_setmethods__["prior"] = _ghmmwrapper.ghmm_dmodel_prior_set
    __swig_getmethods__["prior"] = _ghmmwrapper.ghmm_dmodel_prior_get
    if _newclass:
        prior = _swig_property(_ghmmwrapper.ghmm_dmodel_prior_get, _ghmmwrapper.ghmm_dmodel_prior_set)
    __swig_setmethods__["name"] = _ghmmwrapper.ghmm_dmodel_name_set
    __swig_getmethods__["name"] = _ghmmwrapper.ghmm_dmodel_name_get
    if _newclass:
        name = _swig_property(_ghmmwrapper.ghmm_dmodel_name_get, _ghmmwrapper.ghmm_dmodel_name_set)
    __swig_setmethods__["model_type"] = _ghmmwrapper.ghmm_dmodel_model_type_set
    __swig_getmethods__["model_type"] = _ghmmwrapper.ghmm_dmodel_model_type_get
    if _newclass:
        model_type = _swig_property(_ghmmwrapper.ghmm_dmodel_model_type_get, _ghmmwrapper.ghmm_dmodel_model_type_set)
    __swig_setmethods__["silent"] = _ghmmwrapper.ghmm_dmodel_silent_set
    __swig_getmethods__["silent"] = _ghmmwrapper.ghmm_dmodel_silent_get
    if _newclass:
        silent = _swig_property(_ghmmwrapper.ghmm_dmodel_silent_get, _ghmmwrapper.ghmm_dmodel_silent_set)
    __swig_setmethods__["maxorder"] = _ghmmwrapper.ghmm_dmodel_maxorder_set
    __swig_getmethods__["maxorder"] = _ghmmwrapper.ghmm_dmodel_maxorder_get
    if _newclass:
        maxorder = _swig_property(_ghmmwrapper.ghmm_dmodel_maxorder_get, _ghmmwrapper.ghmm_dmodel_maxorder_set)
    __swig_setmethods__["emission_history"] = _ghmmwrapper.ghmm_dmodel_emission_history_set
    __swig_getmethods__["emission_history"] = _ghmmwrapper.ghmm_dmodel_emission_history_get
    if _newclass:
        emission_history = _swig_property(_ghmmwrapper.ghmm_dmodel_emission_history_get, _ghmmwrapper.ghmm_dmodel_emission_history_set)
    __swig_setmethods__["tied_to"] = _ghmmwrapper.ghmm_dmodel_tied_to_set
    __swig_getmethods__["tied_to"] = _ghmmwrapper.ghmm_dmodel_tied_to_get
    if _newclass:
        tied_to = _swig_property(_ghmmwrapper.ghmm_dmodel_tied_to_get, _ghmmwrapper.ghmm_dmodel_tied_to_set)
    __swig_setmethods__["order"] = _ghmmwrapper.ghmm_dmodel_order_set
    __swig_getmethods__["order"] = _ghmmwrapper.ghmm_dmodel_order_get
    if _newclass:
        order = _swig_property(_ghmmwrapper.ghmm_dmodel_order_get, _ghmmwrapper.ghmm_dmodel_order_set)
    __swig_setmethods__["background_id"] = _ghmmwrapper.ghmm_dmodel_background_id_set
    __swig_getmethods__["background_id"] = _ghmmwrapper.ghmm_dmodel_background_id_get
    if _newclass:
        background_id = _swig_property(_ghmmwrapper.ghmm_dmodel_background_id_get, _ghmmwrapper.ghmm_dmodel_background_id_set)
    __swig_setmethods__["bp"] = _ghmmwrapper.ghmm_dmodel_bp_set
    __swig_getmethods__["bp"] = _ghmmwrapper.ghmm_dmodel_bp_get
    if _newclass:
        bp = _swig_property(_ghmmwrapper.ghmm_dmodel_bp_get, _ghmmwrapper.ghmm_dmodel_bp_set)
    __swig_setmethods__["topo_order"] = _ghmmwrapper.ghmm_dmodel_topo_order_set
    __swig_getmethods__["topo_order"] = _ghmmwrapper.ghmm_dmodel_topo_order_get
    if _newclass:
        topo_order = _swig_property(_ghmmwrapper.ghmm_dmodel_topo_order_get, _ghmmwrapper.ghmm_dmodel_topo_order_set)
    __swig_setmethods__["topo_order_length"] = _ghmmwrapper.ghmm_dmodel_topo_order_length_set
    __swig_getmethods__["topo_order_length"] = _ghmmwrapper.ghmm_dmodel_topo_order_length_get
    if _newclass:
        topo_order_length = _swig_property(_ghmmwrapper.ghmm_dmodel_topo_order_length_get, _ghmmwrapper.ghmm_dmodel_topo_order_length_set)
    __swig_setmethods__["pow_lookup"] = _ghmmwrapper.ghmm_dmodel_pow_lookup_set
    __swig_getmethods__["pow_lookup"] = _ghmmwrapper.ghmm_dmodel_pow_lookup_get
    if _newclass:
        pow_lookup = _swig_property(_ghmmwrapper.ghmm_dmodel_pow_lookup_get, _ghmmwrapper.ghmm_dmodel_pow_lookup_set)
    __swig_setmethods__["label"] = _ghmmwrapper.ghmm_dmodel_label_set
    __swig_getmethods__["label"] = _ghmmwrapper.ghmm_dmodel_label_get
    if _newclass:
        label = _swig_property(_ghmmwrapper.ghmm_dmodel_label_get, _ghmmwrapper.ghmm_dmodel_label_set)
    __swig_setmethods__["label_alphabet"] = _ghmmwrapper.ghmm_dmodel_label_alphabet_set
    __swig_getmethods__["label_alphabet"] = _ghmmwrapper.ghmm_dmodel_label_alphabet_get
    if _newclass:
        label_alphabet = _swig_property(_ghmmwrapper.ghmm_dmodel_label_alphabet_get, _ghmmwrapper.ghmm_dmodel_label_alphabet_set)
    __swig_setmethods__["alphabet"] = _ghmmwrapper.ghmm_dmodel_alphabet_set
    __swig_getmethods__["alphabet"] = _ghmmwrapper.ghmm_dmodel_alphabet_get
    if _newclass:
        alphabet = _swig_property(_ghmmwrapper.ghmm_dmodel_alphabet_get, _ghmmwrapper.ghmm_dmodel_alphabet_set)

    def __init__(self, *args):
        this = _ghmmwrapper.new_ghmm_dmodel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ghmmwrapper.delete_ghmm_dmodel
    __del__ = lambda self: None

    def write_xml(self, filename):
        return _ghmmwrapper.ghmm_dmodel_write_xml(self, filename)

    def forward_init(self, alpha_1, symb, scale):
        return _ghmmwrapper.ghmm_dmodel_forward_init(self, alpha_1, symb, scale)

    def forward(self, O, len, alpha, scale):
        return _ghmmwrapper.ghmm_dmodel_forward(self, O, len, alpha, scale)

    def backward(self, O, len, beta, scale):
        return _ghmmwrapper.ghmm_dmodel_backward(self, O, len, beta, scale)

    def backward_termination(self, O, length, beta, scale):
        return _ghmmwrapper.ghmm_dmodel_backward_termination(self, O, length, beta, scale)

    def logp(self, O, len):
        return _ghmmwrapper.ghmm_dmodel_logp(self, O, len)

    def logp_joint(self, O, len, S, slen):
        return _ghmmwrapper.ghmm_dmodel_logp_joint(self, O, len, S, slen)

    def forward_lean(self, O, len):
        return _ghmmwrapper.ghmm_dmodel_forward_lean(self, O, len)

    def generate_sequences(self, seed, global_len, seq_number, Tmax):
        return _ghmmwrapper.ghmm_dmodel_generate_sequences(self, seed, global_len, seq_number, Tmax)

    def likelihood(self, sq):
        return _ghmmwrapper.ghmm_dmodel_likelihood(self, sq)

    def get_transition(self, i, j):
        return _ghmmwrapper.ghmm_dmodel_get_transition(self, i, j)

    def check_transition(self, i, j):
        return _ghmmwrapper.ghmm_dmodel_check_transition(self, i, j)

    def set_transition(self, i, j, prob):
        return _ghmmwrapper.ghmm_dmodel_set_transition(self, i, j, prob)

    def prob_distance(self, m, maxT, symmetric, verbose):
        return _ghmmwrapper.ghmm_dmodel_prob_distance(self, m, maxT, symmetric, verbose)

    def normalize(self):
        return _ghmmwrapper.ghmm_dmodel_normalize(self)

    def add_noise(self, level, seed):
        return _ghmmwrapper.ghmm_dmodel_add_noise(self, level, seed)

    def duration_apply(self, cur, times):
        return _ghmmwrapper.ghmm_dmodel_duration_apply(self, cur, times)

    def background_apply(self, background_weight):
        return _ghmmwrapper.ghmm_dmodel_background_apply(self, background_weight)

    def get_uniform_background(self, sq):
        return _ghmmwrapper.ghmm_dmodel_get_uniform_background(self, sq)

    def order_topological(self):
        return _ghmmwrapper.ghmm_dmodel_order_topological(self)

    def update_tie_groups(self):
        return _ghmmwrapper.ghmm_dmodel_update_tie_groups(self)

    def baum_welch(self, sq):
        return _ghmmwrapper.ghmm_dmodel_baum_welch(self, sq)

    def baum_welch_nstep(self, sq, max_step, likelihood_delta):
        return _ghmmwrapper.ghmm_dmodel_baum_welch_nstep(self, sq, max_step, likelihood_delta)

    def fbgibbs(self, seq, pA, pB, pPi, burnIn, seed):
        return _ghmmwrapper.ghmm_dmodel_fbgibbs(self, seq, pA, pB, pPi, burnIn, seed)

    def cfbgibbs(self, seq, pA, pB, pPi, R, burnIn, seed):
        return _ghmmwrapper.ghmm_dmodel_cfbgibbs(self, seq, pA, pB, pPi, R, burnIn, seed)

    def viterbi(self, o, len):
        return _ghmmwrapper.ghmm_dmodel_viterbi(self, o, len)

    def viterbi_logp(self, o, len, state_seq):
        return _ghmmwrapper.ghmm_dmodel_viterbi_logp(self, o, len, state_seq)

    def getState(self, index):
        return _ghmmwrapper.ghmm_dmodel_getState(self, index)

    def getSilent(self, index):
        return _ghmmwrapper.ghmm_dmodel_getSilent(self, index)

    def setSilent(self, index, value):
        return _ghmmwrapper.ghmm_dmodel_setSilent(self, index, value)

    def getTiedTo(self, index):
        return _ghmmwrapper.ghmm_dmodel_getTiedTo(self, index)

    def setTiedTo(self, index, value):
        return _ghmmwrapper.ghmm_dmodel_setTiedTo(self, index, value)

    def getOrder(self, index):
        return _ghmmwrapper.ghmm_dmodel_getOrder(self, index)

    def setOrder(self, index, value):
        return _ghmmwrapper.ghmm_dmodel_setOrder(self, index, value)

    def getBackgroundID(self, index):
        return _ghmmwrapper.ghmm_dmodel_getBackgroundID(self, index)

    def setBackgroundID(self, index, value):
        return _ghmmwrapper.ghmm_dmodel_setBackgroundID(self, index, value)

    def getStateLabel(self, index):
        return _ghmmwrapper.ghmm_dmodel_getStateLabel(self, index)

    def setStateLabel(self, index, value):
        return _ghmmwrapper.ghmm_dmodel_setStateLabel(self, index, value)

    def addModelTypeFlags(self, flags):
        return _ghmmwrapper.ghmm_dmodel_addModelTypeFlags(self, flags)

    def removeModelTypeFlags(self, flags):
        return _ghmmwrapper.ghmm_dmodel_removeModelTypeFlags(self, flags)

    def getStateName(self, index):
        return _ghmmwrapper.ghmm_dmodel_getStateName(self, index)

    def setStateName(self, index, name):
        return _ghmmwrapper.ghmm_dmodel_setStateName(self, index, name)

    def label_forward(self, O, label, len, alpha, scale):
        return _ghmmwrapper.ghmm_dmodel_label_forward(self, O, label, len, alpha, scale)

    def label_logp(self, O, label, len):
        return _ghmmwrapper.ghmm_dmodel_label_logp(self, O, label, len)

    def label_backward(self, O, label, len, beta, scale):
        return _ghmmwrapper.ghmm_dmodel_label_backward(self, O, label, len, beta, scale)

    def label_gradient_descent(self, sq, eta, no_steps):
        return _ghmmwrapper.ghmm_dmodel_label_gradient_descent(self, sq, eta, no_steps)

    def label_kbest(self, o_seq, seq_len, k):
        return _ghmmwrapper.ghmm_dmodel_label_kbest(self, o_seq, seq_len, k)

    def label_baum_welch(self, sq):
        return _ghmmwrapper.ghmm_dmodel_label_baum_welch(self, sq)

    def label_baum_welch_nstep(self, sq, max_step, likelihood_delta):
        return _ghmmwrapper.ghmm_dmodel_label_baum_welch_nstep(self, sq, max_step, likelihood_delta)

    def label_generate_sequences(self, seed, global_len, seq_number, Tmax):
        return _ghmmwrapper.ghmm_dmodel_label_generate_sequences(self, seed, global_len, seq_number, Tmax)

    def getLabel(self, index):
        return _ghmmwrapper.ghmm_dmodel_getLabel(self, index)
ghmm_dmodel_swigregister = _ghmmwrapper.ghmm_dmodel_swigregister
ghmm_dmodel_swigregister(ghmm_dmodel)


def ghmm_dmodel_free(mo):
    return _ghmmwrapper.ghmm_dmodel_free(mo)
ghmm_dmodel_free = _ghmmwrapper.ghmm_dmodel_free

def dmodel_array_alloc(number):
    return _ghmmwrapper.dmodel_array_alloc(number)
dmodel_array_alloc = _ghmmwrapper.dmodel_array_alloc

def dmodel_array_getRef(arg1, index):
    return _ghmmwrapper.dmodel_array_getRef(arg1, index)
dmodel_array_getRef = _ghmmwrapper.dmodel_array_getRef

def dmodel_ptr_array_alloc(number):
    return _ghmmwrapper.dmodel_ptr_array_alloc(number)
dmodel_ptr_array_alloc = _ghmmwrapper.dmodel_ptr_array_alloc

def dmodel_ptr_array_getitem(arg1, index):
    return _ghmmwrapper.dmodel_ptr_array_getitem(arg1, index)
dmodel_ptr_array_getitem = _ghmmwrapper.dmodel_ptr_array_getitem

def dmodel_ptr_array_setitem(arg1, index, value):
    return _ghmmwrapper.dmodel_ptr_array_setitem(arg1, index, value)
dmodel_ptr_array_setitem = _ghmmwrapper.dmodel_ptr_array_setitem

def ghmm_dmodel_label_discrim_perf(mo, sqs, noC):
    return _ghmmwrapper.ghmm_dmodel_label_discrim_perf(mo, sqs, noC)
ghmm_dmodel_label_discrim_perf = _ghmmwrapper.ghmm_dmodel_label_discrim_perf

def ghmm_dmodel_label_discriminative(mo, sqs, noC, max_steps, gradient):
    return _ghmmwrapper.ghmm_dmodel_label_discriminative(mo, sqs, noC, max_steps, gradient)
ghmm_dmodel_label_discriminative = _ghmmwrapper.ghmm_dmodel_label_discriminative
class ghmm_dpmodel_class_change_context(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ghmm_dpmodel_class_change_context, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ghmm_dpmodel_class_change_context, name)
    __repr__ = _swig_repr
    __swig_setmethods__["python_module"] = _ghmmwrapper.ghmm_dpmodel_class_change_context_python_module_set
    __swig_getmethods__["python_module"] = _ghmmwrapper.ghmm_dpmodel_class_change_context_python_module_get
    if _newclass:
        python_module = _swig_property(_ghmmwrapper.ghmm_dpmodel_class_change_context_python_module_get, _ghmmwrapper.ghmm_dpmodel_class_change_context_python_module_set)
    __swig_setmethods__["python_function"] = _ghmmwrapper.ghmm_dpmodel_class_change_context_python_function_set
    __swig_getmethods__["python_function"] = _ghmmwrapper.ghmm_dpmodel_class_change_context_python_function_get
    if _newclass:
        python_function = _swig_property(_ghmmwrapper.ghmm_dpmodel_class_change_context_python_function_get, _ghmmwrapper.ghmm_dpmodel_class_change_context_python_function_set)
    __swig_setmethods__["get_class"] = _ghmmwrapper.ghmm_dpmodel_class_change_context_get_class_set
    __swig_getmethods__["get_class"] = _ghmmwrapper.ghmm_dpmodel_class_change_context_get_class_get
    if _newclass:
        get_class = _swig_property(_ghmmwrapper.ghmm_dpmodel_class_change_context_get_class_get, _ghmmwrapper.ghmm_dpmodel_class_change_context_get_class_set)
    __swig_setmethods__["user_data"] = _ghmmwrapper.ghmm_dpmodel_class_change_context_user_data_set
    __swig_getmethods__["user_data"] = _ghmmwrapper.ghmm_dpmodel_class_change_context_user_data_get
    if _newclass:
        user_data = _swig_property(_ghmmwrapper.ghmm_dpmodel_class_change_context_user_data_get, _ghmmwrapper.ghmm_dpmodel_class_change_context_user_data_set)

    def __init__(self):
        this = _ghmmwrapper.new_ghmm_dpmodel_class_change_context()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ghmmwrapper.delete_ghmm_dpmodel_class_change_context
    __del__ = lambda self: None
ghmm_dpmodel_class_change_context_swigregister = _ghmmwrapper.ghmm_dpmodel_class_change_context_swigregister
ghmm_dpmodel_class_change_context_swigregister(ghmm_dpmodel_class_change_context)

class ghmm_dpstate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ghmm_dpstate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ghmm_dpstate, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pi"] = _ghmmwrapper.ghmm_dpstate_pi_set
    __swig_getmethods__["pi"] = _ghmmwrapper.ghmm_dpstate_pi_get
    if _newclass:
        pi = _swig_property(_ghmmwrapper.ghmm_dpstate_pi_get, _ghmmwrapper.ghmm_dpstate_pi_set)
    __swig_setmethods__["log_pi"] = _ghmmwrapper.ghmm_dpstate_log_pi_set
    __swig_getmethods__["log_pi"] = _ghmmwrapper.ghmm_dpstate_log_pi_get
    if _newclass:
        log_pi = _swig_property(_ghmmwrapper.ghmm_dpstate_log_pi_get, _ghmmwrapper.ghmm_dpstate_log_pi_set)
    __swig_setmethods__["b"] = _ghmmwrapper.ghmm_dpstate_b_set
    __swig_getmethods__["b"] = _ghmmwrapper.ghmm_dpstate_b_get
    if _newclass:
        b = _swig_property(_ghmmwrapper.ghmm_dpstate_b_get, _ghmmwrapper.ghmm_dpstate_b_set)
    __swig_setmethods__["order"] = _ghmmwrapper.ghmm_dpstate_order_set
    __swig_getmethods__["order"] = _ghmmwrapper.ghmm_dpstate_order_get
    if _newclass:
        order = _swig_property(_ghmmwrapper.ghmm_dpstate_order_get, _ghmmwrapper.ghmm_dpstate_order_set)
    __swig_setmethods__["out_id"] = _ghmmwrapper.ghmm_dpstate_out_id_set
    __swig_getmethods__["out_id"] = _ghmmwrapper.ghmm_dpstate_out_id_get
    if _newclass:
        out_id = _swig_property(_ghmmwrapper.ghmm_dpstate_out_id_get, _ghmmwrapper.ghmm_dpstate_out_id_set)
    __swig_setmethods__["in_id"] = _ghmmwrapper.ghmm_dpstate_in_id_set
    __swig_getmethods__["in_id"] = _ghmmwrapper.ghmm_dpstate_in_id_get
    if _newclass:
        in_id = _swig_property(_ghmmwrapper.ghmm_dpstate_in_id_get, _ghmmwrapper.ghmm_dpstate_in_id_set)
    __swig_setmethods__["out_a"] = _ghmmwrapper.ghmm_dpstate_out_a_set
    __swig_getmethods__["out_a"] = _ghmmwrapper.ghmm_dpstate_out_a_get
    if _newclass:
        out_a = _swig_property(_ghmmwrapper.ghmm_dpstate_out_a_get, _ghmmwrapper.ghmm_dpstate_out_a_set)
    __swig_setmethods__["in_a"] = _ghmmwrapper.ghmm_dpstate_in_a_set
    __swig_getmethods__["in_a"] = _ghmmwrapper.ghmm_dpstate_in_a_get
    if _newclass:
        in_a = _swig_property(_ghmmwrapper.ghmm_dpstate_in_a_get, _ghmmwrapper.ghmm_dpstate_in_a_set)
    __swig_setmethods__["kclasses"] = _ghmmwrapper.ghmm_dpstate_kclasses_set
    __swig_getmethods__["kclasses"] = _ghmmwrapper.ghmm_dpstate_kclasses_get
    if _newclass:
        kclasses = _swig_property(_ghmmwrapper.ghmm_dpstate_kclasses_get, _ghmmwrapper.ghmm_dpstate_kclasses_set)
    __swig_setmethods__["class_change"] = _ghmmwrapper.ghmm_dpstate_class_change_set
    __swig_getmethods__["class_change"] = _ghmmwrapper.ghmm_dpstate_class_change_get
    if _newclass:
        class_change = _swig_property(_ghmmwrapper.ghmm_dpstate_class_change_get, _ghmmwrapper.ghmm_dpstate_class_change_set)
    __swig_setmethods__["out_states"] = _ghmmwrapper.ghmm_dpstate_out_states_set
    __swig_getmethods__["out_states"] = _ghmmwrapper.ghmm_dpstate_out_states_get
    if _newclass:
        out_states = _swig_property(_ghmmwrapper.ghmm_dpstate_out_states_get, _ghmmwrapper.ghmm_dpstate_out_states_set)
    __swig_setmethods__["in_states"] = _ghmmwrapper.ghmm_dpstate_in_states_set
    __swig_getmethods__["in_states"] = _ghmmwrapper.ghmm_dpstate_in_states_get
    if _newclass:
        in_states = _swig_property(_ghmmwrapper.ghmm_dpstate_in_states_get, _ghmmwrapper.ghmm_dpstate_in_states_set)
    __swig_setmethods__["fix"] = _ghmmwrapper.ghmm_dpstate_fix_set
    __swig_getmethods__["fix"] = _ghmmwrapper.ghmm_dpstate_fix_get
    if _newclass:
        fix = _swig_property(_ghmmwrapper.ghmm_dpstate_fix_get, _ghmmwrapper.ghmm_dpstate_fix_set)
    __swig_setmethods__["label"] = _ghmmwrapper.ghmm_dpstate_label_set
    __swig_getmethods__["label"] = _ghmmwrapper.ghmm_dpstate_label_get
    if _newclass:
        label = _swig_property(_ghmmwrapper.ghmm_dpstate_label_get, _ghmmwrapper.ghmm_dpstate_label_set)
    __swig_setmethods__["offset_x"] = _ghmmwrapper.ghmm_dpstate_offset_x_set
    __swig_getmethods__["offset_x"] = _ghmmwrapper.ghmm_dpstate_offset_x_get
    if _newclass:
        offset_x = _swig_property(_ghmmwrapper.ghmm_dpstate_offset_x_get, _ghmmwrapper.ghmm_dpstate_offset_x_set)
    __swig_setmethods__["offset_y"] = _ghmmwrapper.ghmm_dpstate_offset_y_set
    __swig_getmethods__["offset_y"] = _ghmmwrapper.ghmm_dpstate_offset_y_get
    if _newclass:
        offset_y = _swig_property(_ghmmwrapper.ghmm_dpstate_offset_y_get, _ghmmwrapper.ghmm_dpstate_offset_y_set)
    __swig_setmethods__["alphabet"] = _ghmmwrapper.ghmm_dpstate_alphabet_set
    __swig_getmethods__["alphabet"] = _ghmmwrapper.ghmm_dpstate_alphabet_get
    if _newclass:
        alphabet = _swig_property(_ghmmwrapper.ghmm_dpstate_alphabet_get, _ghmmwrapper.ghmm_dpstate_alphabet_set)
    __swig_setmethods__["xPosition"] = _ghmmwrapper.ghmm_dpstate_xPosition_set
    __swig_getmethods__["xPosition"] = _ghmmwrapper.ghmm_dpstate_xPosition_get
    if _newclass:
        xPosition = _swig_property(_ghmmwrapper.ghmm_dpstate_xPosition_get, _ghmmwrapper.ghmm_dpstate_xPosition_set)
    __swig_setmethods__["yPosition"] = _ghmmwrapper.ghmm_dpstate_yPosition_set
    __swig_getmethods__["yPosition"] = _ghmmwrapper.ghmm_dpstate_yPosition_get
    if _newclass:
        yPosition = _swig_property(_ghmmwrapper.ghmm_dpstate_yPosition_get, _ghmmwrapper.ghmm_dpstate_yPosition_set)

    def __init__(self):
        this = _ghmmwrapper.new_ghmm_dpstate()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ghmmwrapper.delete_ghmm_dpstate
    __del__ = lambda self: None
ghmm_dpstate_swigregister = _ghmmwrapper.ghmm_dpstate_swigregister
ghmm_dpstate_swigregister(ghmm_dpstate)


def dpstate_array_alloc(number):
    return _ghmmwrapper.dpstate_array_alloc(number)
dpstate_array_alloc = _ghmmwrapper.dpstate_array_alloc

def dpstate_array_getRef(arg1, index):
    return _ghmmwrapper.dpstate_array_getRef(arg1, index)
dpstate_array_getRef = _ghmmwrapper.dpstate_array_getRef

def dpstate_ptr_array_alloc(number):
    return _ghmmwrapper.dpstate_ptr_array_alloc(number)
dpstate_ptr_array_alloc = _ghmmwrapper.dpstate_ptr_array_alloc

def dpstate_ptr_array_getitem(arg1, index):
    return _ghmmwrapper.dpstate_ptr_array_getitem(arg1, index)
dpstate_ptr_array_getitem = _ghmmwrapper.dpstate_ptr_array_getitem

def dpstate_ptr_array_setitem(arg1, index, value):
    return _ghmmwrapper.dpstate_ptr_array_setitem(arg1, index, value)
dpstate_ptr_array_setitem = _ghmmwrapper.dpstate_ptr_array_setitem
class ghmm_dpmodel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ghmm_dpmodel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ghmm_dpmodel, name)
    __repr__ = _swig_repr
    __swig_setmethods__["N"] = _ghmmwrapper.ghmm_dpmodel_N_set
    __swig_getmethods__["N"] = _ghmmwrapper.ghmm_dpmodel_N_get
    if _newclass:
        N = _swig_property(_ghmmwrapper.ghmm_dpmodel_N_get, _ghmmwrapper.ghmm_dpmodel_N_set)
    __swig_setmethods__["M"] = _ghmmwrapper.ghmm_dpmodel_M_set
    __swig_getmethods__["M"] = _ghmmwrapper.ghmm_dpmodel_M_get
    if _newclass:
        M = _swig_property(_ghmmwrapper.ghmm_dpmodel_M_get, _ghmmwrapper.ghmm_dpmodel_M_set)
    __swig_setmethods__["s"] = _ghmmwrapper.ghmm_dpmodel_s_set
    __swig_getmethods__["s"] = _ghmmwrapper.ghmm_dpmodel_s_get
    if _newclass:
        s = _swig_property(_ghmmwrapper.ghmm_dpmodel_s_get, _ghmmwrapper.ghmm_dpmodel_s_set)
    __swig_setmethods__["prior"] = _ghmmwrapper.ghmm_dpmodel_prior_set
    __swig_getmethods__["prior"] = _ghmmwrapper.ghmm_dpmodel_prior_get
    if _newclass:
        prior = _swig_property(_ghmmwrapper.ghmm_dpmodel_prior_get, _ghmmwrapper.ghmm_dpmodel_prior_set)
    __swig_setmethods__["name"] = _ghmmwrapper.ghmm_dpmodel_name_set
    __swig_getmethods__["name"] = _ghmmwrapper.ghmm_dpmodel_name_get
    if _newclass:
        name = _swig_property(_ghmmwrapper.ghmm_dpmodel_name_get, _ghmmwrapper.ghmm_dpmodel_name_set)
    __swig_setmethods__["model_type"] = _ghmmwrapper.ghmm_dpmodel_model_type_set
    __swig_getmethods__["model_type"] = _ghmmwrapper.ghmm_dpmodel_model_type_get
    if _newclass:
        model_type = _swig_property(_ghmmwrapper.ghmm_dpmodel_model_type_get, _ghmmwrapper.ghmm_dpmodel_model_type_set)
    __swig_setmethods__["silent"] = _ghmmwrapper.ghmm_dpmodel_silent_set
    __swig_getmethods__["silent"] = _ghmmwrapper.ghmm_dpmodel_silent_get
    if _newclass:
        silent = _swig_property(_ghmmwrapper.ghmm_dpmodel_silent_get, _ghmmwrapper.ghmm_dpmodel_silent_set)
    __swig_setmethods__["maxorder"] = _ghmmwrapper.ghmm_dpmodel_maxorder_set
    __swig_getmethods__["maxorder"] = _ghmmwrapper.ghmm_dpmodel_maxorder_get
    if _newclass:
        maxorder = _swig_property(_ghmmwrapper.ghmm_dpmodel_maxorder_get, _ghmmwrapper.ghmm_dpmodel_maxorder_set)
    __swig_setmethods__["emission_history"] = _ghmmwrapper.ghmm_dpmodel_emission_history_set
    __swig_getmethods__["emission_history"] = _ghmmwrapper.ghmm_dpmodel_emission_history_get
    if _newclass:
        emission_history = _swig_property(_ghmmwrapper.ghmm_dpmodel_emission_history_get, _ghmmwrapper.ghmm_dpmodel_emission_history_set)
    __swig_setmethods__["tied_to"] = _ghmmwrapper.ghmm_dpmodel_tied_to_set
    __swig_getmethods__["tied_to"] = _ghmmwrapper.ghmm_dpmodel_tied_to_get
    if _newclass:
        tied_to = _swig_property(_ghmmwrapper.ghmm_dpmodel_tied_to_get, _ghmmwrapper.ghmm_dpmodel_tied_to_set)
    __swig_setmethods__["background_id"] = _ghmmwrapper.ghmm_dpmodel_background_id_set
    __swig_getmethods__["background_id"] = _ghmmwrapper.ghmm_dpmodel_background_id_get
    if _newclass:
        background_id = _swig_property(_ghmmwrapper.ghmm_dpmodel_background_id_get, _ghmmwrapper.ghmm_dpmodel_background_id_set)
    __swig_setmethods__["bp"] = _ghmmwrapper.ghmm_dpmodel_bp_set
    __swig_getmethods__["bp"] = _ghmmwrapper.ghmm_dpmodel_bp_get
    if _newclass:
        bp = _swig_property(_ghmmwrapper.ghmm_dpmodel_bp_get, _ghmmwrapper.ghmm_dpmodel_bp_set)
    __swig_setmethods__["topo_order"] = _ghmmwrapper.ghmm_dpmodel_topo_order_set
    __swig_getmethods__["topo_order"] = _ghmmwrapper.ghmm_dpmodel_topo_order_get
    if _newclass:
        topo_order = _swig_property(_ghmmwrapper.ghmm_dpmodel_topo_order_get, _ghmmwrapper.ghmm_dpmodel_topo_order_set)
    __swig_setmethods__["topo_order_length"] = _ghmmwrapper.ghmm_dpmodel_topo_order_length_set
    __swig_getmethods__["topo_order_length"] = _ghmmwrapper.ghmm_dpmodel_topo_order_length_get
    if _newclass:
        topo_order_length = _swig_property(_ghmmwrapper.ghmm_dpmodel_topo_order_length_get, _ghmmwrapper.ghmm_dpmodel_topo_order_length_set)
    __swig_setmethods__["number_of_alphabets"] = _ghmmwrapper.ghmm_dpmodel_number_of_alphabets_set
    __swig_getmethods__["number_of_alphabets"] = _ghmmwrapper.ghmm_dpmodel_number_of_alphabets_get
    if _newclass:
        number_of_alphabets = _swig_property(_ghmmwrapper.ghmm_dpmodel_number_of_alphabets_get, _ghmmwrapper.ghmm_dpmodel_number_of_alphabets_set)
    __swig_setmethods__["size_of_alphabet"] = _ghmmwrapper.ghmm_dpmodel_size_of_alphabet_set
    __swig_getmethods__["size_of_alphabet"] = _ghmmwrapper.ghmm_dpmodel_size_of_alphabet_get
    if _newclass:
        size_of_alphabet = _swig_property(_ghmmwrapper.ghmm_dpmodel_size_of_alphabet_get, _ghmmwrapper.ghmm_dpmodel_size_of_alphabet_set)
    __swig_setmethods__["number_of_d_seqs"] = _ghmmwrapper.ghmm_dpmodel_number_of_d_seqs_set
    __swig_getmethods__["number_of_d_seqs"] = _ghmmwrapper.ghmm_dpmodel_number_of_d_seqs_get
    if _newclass:
        number_of_d_seqs = _swig_property(_ghmmwrapper.ghmm_dpmodel_number_of_d_seqs_get, _ghmmwrapper.ghmm_dpmodel_number_of_d_seqs_set)
    __swig_setmethods__["max_offset_x"] = _ghmmwrapper.ghmm_dpmodel_max_offset_x_set
    __swig_getmethods__["max_offset_x"] = _ghmmwrapper.ghmm_dpmodel_max_offset_x_get
    if _newclass:
        max_offset_x = _swig_property(_ghmmwrapper.ghmm_dpmodel_max_offset_x_get, _ghmmwrapper.ghmm_dpmodel_max_offset_x_set)
    __swig_setmethods__["max_offset_y"] = _ghmmwrapper.ghmm_dpmodel_max_offset_y_set
    __swig_getmethods__["max_offset_y"] = _ghmmwrapper.ghmm_dpmodel_max_offset_y_get
    if _newclass:
        max_offset_y = _swig_property(_ghmmwrapper.ghmm_dpmodel_max_offset_y_get, _ghmmwrapper.ghmm_dpmodel_max_offset_y_set)
    __swig_setmethods__["debug"] = _ghmmwrapper.ghmm_dpmodel_debug_set
    __swig_getmethods__["debug"] = _ghmmwrapper.ghmm_dpmodel_debug_get
    if _newclass:
        debug = _swig_property(_ghmmwrapper.ghmm_dpmodel_debug_get, _ghmmwrapper.ghmm_dpmodel_debug_set)
    __swig_destroy__ = _ghmmwrapper.delete_ghmm_dpmodel
    __del__ = lambda self: None

    def viterbi_logp(self, X, Y, state_seq, state_seq_len):
        return _ghmmwrapper.ghmm_dpmodel_viterbi_logp(self, X, Y, state_seq, state_seq_len)

    def viterbi_propagate(self, X, Y, path_length, max_size):
        return _ghmmwrapper.ghmm_dpmodel_viterbi_propagate(self, X, Y, path_length, max_size)

    def viterbi_propagate_segment(self, X, Y, path_length, max_size, start_x, start_y, stop_x, stop_y, start_state, stop_state, start_log_p, stop_log_p):
        return _ghmmwrapper.ghmm_dpmodel_viterbi_propagate_segment(self, X, Y, path_length, max_size, start_x, start_y, stop_x, stop_y, start_state, stop_state, start_log_p, stop_log_p)

    def getState(self, index):
        return _ghmmwrapper.ghmm_dpmodel_getState(self, index)

    def __init__(self):
        this = _ghmmwrapper.new_ghmm_dpmodel()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
ghmm_dpmodel_swigregister = _ghmmwrapper.ghmm_dpmodel_swigregister
ghmm_dpmodel_swigregister(ghmm_dpmodel)


def ghmm_dpmodel_free(mo):
    return _ghmmwrapper.ghmm_dpmodel_free(mo)
ghmm_dpmodel_free = _ghmmwrapper.ghmm_dpmodel_free

def dpmodel_array_alloc(number):
    return _ghmmwrapper.dpmodel_array_alloc(number)
dpmodel_array_alloc = _ghmmwrapper.dpmodel_array_alloc

def dpmodel_array_getRef(arg1, index):
    return _ghmmwrapper.dpmodel_array_getRef(arg1, index)
dpmodel_array_getRef = _ghmmwrapper.dpmodel_array_getRef

def dpmodel_ptr_array_alloc(number):
    return _ghmmwrapper.dpmodel_ptr_array_alloc(number)
dpmodel_ptr_array_alloc = _ghmmwrapper.dpmodel_ptr_array_alloc

def dpmodel_ptr_array_getitem(arg1, index):
    return _ghmmwrapper.dpmodel_ptr_array_getitem(arg1, index)
dpmodel_ptr_array_getitem = _ghmmwrapper.dpmodel_ptr_array_getitem

def dpmodel_ptr_array_setitem(arg1, index, value):
    return _ghmmwrapper.dpmodel_ptr_array_setitem(arg1, index, value)
dpmodel_ptr_array_setitem = _ghmmwrapper.dpmodel_ptr_array_setitem

def ghmm_dpmodel_pair(symbol_x, symbol_y, alphabet_size, off_x, off_y):
    return _ghmmwrapper.ghmm_dpmodel_pair(symbol_x, symbol_y, alphabet_size, off_x, off_y)
ghmm_dpmodel_pair = _ghmmwrapper.ghmm_dpmodel_pair
class ghmm_xmlfile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ghmm_xmlfile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ghmm_xmlfile, name)
    __repr__ = _swig_repr
    __swig_setmethods__["noModels"] = _ghmmwrapper.ghmm_xmlfile_noModels_set
    __swig_getmethods__["noModels"] = _ghmmwrapper.ghmm_xmlfile_noModels_get
    if _newclass:
        noModels = _swig_property(_ghmmwrapper.ghmm_xmlfile_noModels_get, _ghmmwrapper.ghmm_xmlfile_noModels_set)
    __swig_setmethods__["modelType"] = _ghmmwrapper.ghmm_xmlfile_modelType_set
    __swig_getmethods__["modelType"] = _ghmmwrapper.ghmm_xmlfile_modelType_get
    if _newclass:
        modelType = _swig_property(_ghmmwrapper.ghmm_xmlfile_modelType_get, _ghmmwrapper.ghmm_xmlfile_modelType_set)
    __swig_getmethods__["model"] = _ghmmwrapper.ghmm_xmlfile_model_get
    if _newclass:
        model = _swig_property(_ghmmwrapper.ghmm_xmlfile_model_get)
    __swig_destroy__ = _ghmmwrapper.delete_ghmm_xmlfile
    __del__ = lambda self: None

    def get_cmodel(self, index):
        return _ghmmwrapper.ghmm_xmlfile_get_cmodel(self, index)

    def get_dmodel(self, index):
        return _ghmmwrapper.ghmm_xmlfile_get_dmodel(self, index)

    def get_dpmodel(self, index):
        return _ghmmwrapper.ghmm_xmlfile_get_dpmodel(self, index)

    def get_dsmodel(self, index):
        return _ghmmwrapper.ghmm_xmlfile_get_dsmodel(self, index)

    def __init__(self):
        this = _ghmmwrapper.new_ghmm_xmlfile()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
ghmm_xmlfile_swigregister = _ghmmwrapper.ghmm_xmlfile_swigregister
ghmm_xmlfile_swigregister(ghmm_xmlfile)

class ghmm_xmlfile_model(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ghmm_xmlfile_model, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ghmm_xmlfile_model, name)
    __repr__ = _swig_repr
    __swig_setmethods__["c"] = _ghmmwrapper.ghmm_xmlfile_model_c_set
    __swig_getmethods__["c"] = _ghmmwrapper.ghmm_xmlfile_model_c_get
    if _newclass:
        c = _swig_property(_ghmmwrapper.ghmm_xmlfile_model_c_get, _ghmmwrapper.ghmm_xmlfile_model_c_set)
    __swig_setmethods__["d"] = _ghmmwrapper.ghmm_xmlfile_model_d_set
    __swig_getmethods__["d"] = _ghmmwrapper.ghmm_xmlfile_model_d_get
    if _newclass:
        d = _swig_property(_ghmmwrapper.ghmm_xmlfile_model_d_get, _ghmmwrapper.ghmm_xmlfile_model_d_set)
    __swig_setmethods__["dp"] = _ghmmwrapper.ghmm_xmlfile_model_dp_set
    __swig_getmethods__["dp"] = _ghmmwrapper.ghmm_xmlfile_model_dp_get
    if _newclass:
        dp = _swig_property(_ghmmwrapper.ghmm_xmlfile_model_dp_get, _ghmmwrapper.ghmm_xmlfile_model_dp_set)
    __swig_setmethods__["ds"] = _ghmmwrapper.ghmm_xmlfile_model_ds_set
    __swig_getmethods__["ds"] = _ghmmwrapper.ghmm_xmlfile_model_ds_get
    if _newclass:
        ds = _swig_property(_ghmmwrapper.ghmm_xmlfile_model_ds_get, _ghmmwrapper.ghmm_xmlfile_model_ds_set)

    def __init__(self):
        this = _ghmmwrapper.new_ghmm_xmlfile_model()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ghmmwrapper.delete_ghmm_xmlfile_model
    __del__ = lambda self: None
ghmm_xmlfile_model_swigregister = _ghmmwrapper.ghmm_xmlfile_model_swigregister
ghmm_xmlfile_model_swigregister(ghmm_xmlfile_model)


def ghmm_xmlfile_parse(filename):
    return _ghmmwrapper.ghmm_xmlfile_parse(filename)
ghmm_xmlfile_parse = _ghmmwrapper.ghmm_xmlfile_parse

def ghmm_xmlfile_validate(filename):
    return _ghmmwrapper.ghmm_xmlfile_validate(filename)
ghmm_xmlfile_validate = _ghmmwrapper.ghmm_xmlfile_validate

def ghmm_xmlfile_write(f, file):
    return _ghmmwrapper.ghmm_xmlfile_write(f, file)
ghmm_xmlfile_write = _ghmmwrapper.ghmm_xmlfile_write

def free(arg1):
    return _ghmmwrapper.free(arg1)
free = _ghmmwrapper.free

def int_array_alloc(length):
    return _ghmmwrapper.int_array_alloc(length)
int_array_alloc = _ghmmwrapper.int_array_alloc

def int_array_getitem(arg1, index):
    return _ghmmwrapper.int_array_getitem(arg1, index)
int_array_getitem = _ghmmwrapper.int_array_getitem

def int_array_setitem(arg1, index, value):
    return _ghmmwrapper.int_array_setitem(arg1, index, value)
int_array_setitem = _ghmmwrapper.int_array_setitem

def long_array_alloc(length):
    return _ghmmwrapper.long_array_alloc(length)
long_array_alloc = _ghmmwrapper.long_array_alloc

def long_array_getitem(arg1, index):
    return _ghmmwrapper.long_array_getitem(arg1, index)
long_array_getitem = _ghmmwrapper.long_array_getitem

def long_array_setitem(arg1, index, value):
    return _ghmmwrapper.long_array_setitem(arg1, index, value)
long_array_setitem = _ghmmwrapper.long_array_setitem

def double_array_alloc(length):
    return _ghmmwrapper.double_array_alloc(length)
double_array_alloc = _ghmmwrapper.double_array_alloc

def double_array_getitem(arg1, index):
    return _ghmmwrapper.double_array_getitem(arg1, index)
double_array_getitem = _ghmmwrapper.double_array_getitem

def double_array_setitem(arg1, index, value):
    return _ghmmwrapper.double_array_setitem(arg1, index, value)
double_array_setitem = _ghmmwrapper.double_array_setitem

def list2int_array(pylist):
    return _ghmmwrapper.list2int_array(pylist)
list2int_array = _ghmmwrapper.list2int_array

def int_array2list(array, length):
    return _ghmmwrapper.int_array2list(array, length)
int_array2list = _ghmmwrapper.int_array2list

def list2double_array(pylist):
    return _ghmmwrapper.list2double_array(pylist)
list2double_array = _ghmmwrapper.list2double_array

def double_array2list(array, length):
    return _ghmmwrapper.double_array2list(array, length)
double_array2list = _ghmmwrapper.double_array2list

def int_matrix_alloc(rows, cols):
    return _ghmmwrapper.int_matrix_alloc(rows, cols)
int_matrix_alloc = _ghmmwrapper.int_matrix_alloc

def int_matrix_alloc_row(rows):
    return _ghmmwrapper.int_matrix_alloc_row(rows)
int_matrix_alloc_row = _ghmmwrapper.int_matrix_alloc_row

def int_matrix_free(mat, rows):
    return _ghmmwrapper.int_matrix_free(mat, rows)
int_matrix_free = _ghmmwrapper.int_matrix_free

def int_matrix_get_col(arg1, index):
    return _ghmmwrapper.int_matrix_get_col(arg1, index)
int_matrix_get_col = _ghmmwrapper.int_matrix_get_col

def int_matrix_set_col(arg1, index, col):
    return _ghmmwrapper.int_matrix_set_col(arg1, index, col)
int_matrix_set_col = _ghmmwrapper.int_matrix_set_col

def int_matrix_getitem(arg1, row, col):
    return _ghmmwrapper.int_matrix_getitem(arg1, row, col)
int_matrix_getitem = _ghmmwrapper.int_matrix_getitem

def int_matrix_setitem(arg1, row, col, value):
    return _ghmmwrapper.int_matrix_setitem(arg1, row, col, value)
int_matrix_setitem = _ghmmwrapper.int_matrix_setitem

def double_matrix_alloc(rows, cols):
    return _ghmmwrapper.double_matrix_alloc(rows, cols)
double_matrix_alloc = _ghmmwrapper.double_matrix_alloc

def double_matrix_alloc_row(rows):
    return _ghmmwrapper.double_matrix_alloc_row(rows)
double_matrix_alloc_row = _ghmmwrapper.double_matrix_alloc_row

def double_matrix_free(mat, rows):
    return _ghmmwrapper.double_matrix_free(mat, rows)
double_matrix_free = _ghmmwrapper.double_matrix_free

def double_matrix_get_col(arg1, index):
    return _ghmmwrapper.double_matrix_get_col(arg1, index)
double_matrix_get_col = _ghmmwrapper.double_matrix_get_col

def double_matrix_set_col(arg1, index, col):
    return _ghmmwrapper.double_matrix_set_col(arg1, index, col)
double_matrix_set_col = _ghmmwrapper.double_matrix_set_col

def double_matrix_getitem(arg1, row, col):
    return _ghmmwrapper.double_matrix_getitem(arg1, row, col)
double_matrix_getitem = _ghmmwrapper.double_matrix_getitem

def double_matrix_setitem(arg1, row, col, value):
    return _ghmmwrapper.double_matrix_setitem(arg1, row, col, value)
double_matrix_setitem = _ghmmwrapper.double_matrix_setitem
# This file is compatible with both classic and new-style classes.


